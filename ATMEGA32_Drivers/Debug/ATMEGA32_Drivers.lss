
ATMEGA32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000140  00800060  00002b52  00002be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  008001a0  008001a0  00002d26  2**0
                  ALLOC
  3 .debug_aranges 000003e0  00000000  00000000  00002d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007c9  00000000  00000000  00003106  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003275  00000000  00000000  000038cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016fd  00000000  00000000  00006b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000277e  00000000  00000000  00008241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000580  00000000  00000000  0000a9c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e7e  00000000  00000000  0000af40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000090e  00000000  00000000  0000bdbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 000175cd  00000000  00000000  0000c6cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00023c99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__vector_10>
      2c:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__vector_11>
      30:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__vector_12>
      34:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3a       	cpi	r26, 0xA0	; 160
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ea       	ldi	r26, 0xA0	; 160
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ba 12 	call	0x2574	; 0x2574 <main>
      8a:	0c 94 a7 15 	jmp	0x2b4e	; 0x2b4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 df 12 	jmp	0x25be	; 0x25be <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 58       	subi	r30, 0x88	; 136
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <LCD_lcd_init>:
 */

#include "lcd.h"

void LCD_lcd_init(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	6c 97       	sbiw	r28, 0x1c	; 28
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 ea       	ldi	r26, 0xA0	; 160
     cba:	b1 e4       	ldi	r27, 0x41	; 65
     cbc:	89 8f       	std	Y+25, r24	; 0x19
     cbe:	9a 8f       	std	Y+26, r25	; 0x1a
     cc0:	ab 8f       	std	Y+27, r26	; 0x1b
     cc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc4:	69 8d       	ldd	r22, Y+25	; 0x19
     cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	4a ef       	ldi	r20, 0xFA	; 250
     cd2:	54 e4       	ldi	r21, 0x44	; 68
     cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	8d 8b       	std	Y+21, r24	; 0x15
     cde:	9e 8b       	std	Y+22, r25	; 0x16
     ce0:	af 8b       	std	Y+23, r26	; 0x17
     ce2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce4:	6d 89       	ldd	r22, Y+21	; 0x15
     ce6:	7e 89       	ldd	r23, Y+22	; 0x16
     ce8:	8f 89       	ldd	r24, Y+23	; 0x17
     cea:	98 8d       	ldd	r25, Y+24	; 0x18
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5f e3       	ldi	r21, 0x3F	; 63
     cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	2c f4       	brge	.+10     	; 0xd06 <LCD_lcd_init+0x66>
		__ticks = 1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9c 8b       	std	Y+20, r25	; 0x14
     d02:	8b 8b       	std	Y+19, r24	; 0x13
     d04:	3f c0       	rjmp	.+126    	; 0xd84 <LCD_lcd_init+0xe4>
	else if (__tmp > 65535)
     d06:	6d 89       	ldd	r22, Y+21	; 0x15
     d08:	7e 89       	ldd	r23, Y+22	; 0x16
     d0a:	8f 89       	ldd	r24, Y+23	; 0x17
     d0c:	98 8d       	ldd	r25, Y+24	; 0x18
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	4f e7       	ldi	r20, 0x7F	; 127
     d14:	57 e4       	ldi	r21, 0x47	; 71
     d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	4c f5       	brge	.+82     	; 0xd70 <LCD_lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d1e:	69 8d       	ldd	r22, Y+25	; 0x19
     d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e2       	ldi	r20, 0x20	; 32
     d2c:	51 e4       	ldi	r21, 0x41	; 65
     d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	bc 01       	movw	r22, r24
     d38:	cd 01       	movw	r24, r26
     d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d3e:	dc 01       	movw	r26, r24
     d40:	cb 01       	movw	r24, r22
     d42:	9c 8b       	std	Y+20, r25	; 0x14
     d44:	8b 8b       	std	Y+19, r24	; 0x13
     d46:	0f c0       	rjmp	.+30     	; 0xd66 <LCD_lcd_init+0xc6>
     d48:	88 ec       	ldi	r24, 0xC8	; 200
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	9a 8b       	std	Y+18, r25	; 0x12
     d4e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d50:	89 89       	ldd	r24, Y+17	; 0x11
     d52:	9a 89       	ldd	r25, Y+18	; 0x12
     d54:	01 97       	sbiw	r24, 0x01	; 1
     d56:	f1 f7       	brne	.-4      	; 0xd54 <LCD_lcd_init+0xb4>
     d58:	9a 8b       	std	Y+18, r25	; 0x12
     d5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d5c:	8b 89       	ldd	r24, Y+19	; 0x13
     d5e:	9c 89       	ldd	r25, Y+20	; 0x14
     d60:	01 97       	sbiw	r24, 0x01	; 1
     d62:	9c 8b       	std	Y+20, r25	; 0x14
     d64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d66:	8b 89       	ldd	r24, Y+19	; 0x13
     d68:	9c 89       	ldd	r25, Y+20	; 0x14
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	69 f7       	brne	.-38     	; 0xd48 <LCD_lcd_init+0xa8>
     d6e:	14 c0       	rjmp	.+40     	; 0xd98 <LCD_lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d70:	6d 89       	ldd	r22, Y+21	; 0x15
     d72:	7e 89       	ldd	r23, Y+22	; 0x16
     d74:	8f 89       	ldd	r24, Y+23	; 0x17
     d76:	98 8d       	ldd	r25, Y+24	; 0x18
     d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	9c 8b       	std	Y+20, r25	; 0x14
     d82:	8b 8b       	std	Y+19, r24	; 0x13
     d84:	8b 89       	ldd	r24, Y+19	; 0x13
     d86:	9c 89       	ldd	r25, Y+20	; 0x14
     d88:	98 8b       	std	Y+16, r25	; 0x10
     d8a:	8f 87       	std	Y+15, r24	; 0x0f
     d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d8e:	98 89       	ldd	r25, Y+16	; 0x10
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <LCD_lcd_init+0xf0>
     d94:	98 8b       	std	Y+16, r25	; 0x10
     d96:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(20);
	DataDir_LCD_control |= (1<<EN_switch | 1<<ReadWrite | 1<<RS_switch) ;
     d98:	a7 e3       	ldi	r26, 0x37	; 55
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e7 e3       	ldi	r30, 0x37	; 55
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	87 60       	ori	r24, 0x07	; 7
     da4:	8c 93       	st	X, r24
	LCD_control &= ~(1<<EN_switch | 1<<ReadWrite | 1<<RS_switch) ;
     da6:	a8 e3       	ldi	r26, 0x38	; 56
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 e3       	ldi	r30, 0x38	; 56
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	88 7f       	andi	r24, 0xF8	; 248
     db2:	8c 93       	st	X, r24

	DataDir_LCD_port = 0xff ;
     db4:	ea e3       	ldi	r30, 0x3A	; 58
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	80 83       	st	Z, r24
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	a0 e7       	ldi	r26, 0x70	; 112
     dc2:	b1 e4       	ldi	r27, 0x41	; 65
     dc4:	8b 87       	std	Y+11, r24	; 0x0b
     dc6:	9c 87       	std	Y+12, r25	; 0x0c
     dc8:	ad 87       	std	Y+13, r26	; 0x0d
     dca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dce:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	4a ef       	ldi	r20, 0xFA	; 250
     dda:	54 e4       	ldi	r21, 0x44	; 68
     ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	8f 83       	std	Y+7, r24	; 0x07
     de6:	98 87       	std	Y+8, r25	; 0x08
     de8:	a9 87       	std	Y+9, r26	; 0x09
     dea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     dec:	6f 81       	ldd	r22, Y+7	; 0x07
     dee:	78 85       	ldd	r23, Y+8	; 0x08
     df0:	89 85       	ldd	r24, Y+9	; 0x09
     df2:	9a 85       	ldd	r25, Y+10	; 0x0a
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e8       	ldi	r20, 0x80	; 128
     dfa:	5f e3       	ldi	r21, 0x3F	; 63
     dfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e00:	88 23       	and	r24, r24
     e02:	2c f4       	brge	.+10     	; 0xe0e <LCD_lcd_init+0x16e>
		__ticks = 1;
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	9e 83       	std	Y+6, r25	; 0x06
     e0a:	8d 83       	std	Y+5, r24	; 0x05
     e0c:	3f c0       	rjmp	.+126    	; 0xe8c <LCD_lcd_init+0x1ec>
	else if (__tmp > 65535)
     e0e:	6f 81       	ldd	r22, Y+7	; 0x07
     e10:	78 85       	ldd	r23, Y+8	; 0x08
     e12:	89 85       	ldd	r24, Y+9	; 0x09
     e14:	9a 85       	ldd	r25, Y+10	; 0x0a
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	3f ef       	ldi	r19, 0xFF	; 255
     e1a:	4f e7       	ldi	r20, 0x7F	; 127
     e1c:	57 e4       	ldi	r21, 0x47	; 71
     e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e22:	18 16       	cp	r1, r24
     e24:	4c f5       	brge	.+82     	; 0xe78 <LCD_lcd_init+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e26:	6b 85       	ldd	r22, Y+11	; 0x0b
     e28:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e2       	ldi	r20, 0x20	; 32
     e34:	51 e4       	ldi	r21, 0x41	; 65
     e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	bc 01       	movw	r22, r24
     e40:	cd 01       	movw	r24, r26
     e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	9e 83       	std	Y+6, r25	; 0x06
     e4c:	8d 83       	std	Y+5, r24	; 0x05
     e4e:	0f c0       	rjmp	.+30     	; 0xe6e <LCD_lcd_init+0x1ce>
     e50:	88 ec       	ldi	r24, 0xC8	; 200
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9c 83       	std	Y+4, r25	; 0x04
     e56:	8b 83       	std	Y+3, r24	; 0x03
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	9c 81       	ldd	r25, Y+4	; 0x04
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	f1 f7       	brne	.-4      	; 0xe5c <LCD_lcd_init+0x1bc>
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	9e 81       	ldd	r25, Y+6	; 0x06
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	9e 83       	std	Y+6, r25	; 0x06
     e6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	00 97       	sbiw	r24, 0x00	; 0
     e74:	69 f7       	brne	.-38     	; 0xe50 <LCD_lcd_init+0x1b0>
     e76:	14 c0       	rjmp	.+40     	; 0xea0 <LCD_lcd_init+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e78:	6f 81       	ldd	r22, Y+7	; 0x07
     e7a:	78 85       	ldd	r23, Y+8	; 0x08
     e7c:	89 85       	ldd	r24, Y+9	; 0x09
     e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	9a 81       	ldd	r25, Y+2	; 0x02
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <LCD_lcd_init+0x1f8>
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

	LCD_clear_screen ();
     ea0:	0e 94 67 07 	call	0xece	; 0xece <LCD_clear_screen>

#ifdef EIGHT_BIT_MODE
	LCD_Send_A_Command(LCD_FUNCTION_8BIT_2LINES);
     ea4:	88 e3       	ldi	r24, 0x38	; 56
     ea6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LCD_Send_A_Command>

	LCD_Send_A_Command(LCD_FUNCTION_4BIT_2LINES);

#endif

	LCD_Send_A_Command(LCD_ENTRY_MODE);
     eaa:	86 e0       	ldi	r24, 0x06	; 6
     eac:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_BEGIN_AT_FIRST_RAW);
     eb0:	80 e8       	ldi	r24, 0x80	; 128
     eb2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LCD_Send_A_Command>
	LCD_Send_A_Command(LCD_DISP_ON_CURSOR_BLINK);
     eb6:	8f e0       	ldi	r24, 0x0F	; 15
     eb8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LCD_Send_A_Command>

}
     ebc:	6c 96       	adiw	r28, 0x1c	; 28
     ebe:	0f b6       	in	r0, 0x3f	; 63
     ec0:	f8 94       	cli
     ec2:	de bf       	out	0x3e, r29	; 62
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <LCD_clear_screen>:

void LCD_clear_screen ()
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	LCD_Send_A_Command(LCD_CLEAR_SCREEN); // clear the screen
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LCD_Send_A_Command>



}
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <LCD_GotoXY>:

void LCD_GotoXY(unsigned char line, unsigned char position )
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <LCD_GotoXY+0x6>
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	6a 83       	std	Y+2, r22	; 0x02

	if(line==0)
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	88 23       	and	r24, r24
     ef4:	41 f4       	brne	.+16     	; 0xf06 <LCD_GotoXY+0x24>
	{
		if (position < 16 && position >=0)
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	80 31       	cpi	r24, 0x10	; 16
     efa:	78 f4       	brcc	.+30     	; 0xf1a <LCD_GotoXY+0x38>
			LCD_Send_A_Command(0x80+position);
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	80 58       	subi	r24, 0x80	; 128
     f00:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LCD_Send_A_Command>
     f04:	0a c0       	rjmp	.+20     	; 0xf1a <LCD_GotoXY+0x38>
	}
	else if (line==1)
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	39 f4       	brne	.+14     	; 0xf1a <LCD_GotoXY+0x38>
	{
		if (position < 16 && position >=0)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	80 31       	cpi	r24, 0x10	; 16
     f10:	20 f4       	brcc	.+8      	; 0xf1a <LCD_GotoXY+0x38>
			LCD_Send_A_Command(0xc0 + position);
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	80 54       	subi	r24, 0x40	; 64
     f16:	0e 94 51 08 	call	0x10a2	; 0x10a2 <LCD_Send_A_Command>
	}
}
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <LCD_check_lcd_isbusy>:




void LCD_check_lcd_isbusy()
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	0f 92       	push	r0
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
	DataDir_LCD_port &= ~(0xff<<DATA_shift) ;
     f2e:	ea e3       	ldi	r30, 0x3A	; 58
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	ea e3       	ldi	r30, 0x3A	; 58
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	10 82       	st	Z, r1
	LCD_control |= (1<<ReadWrite); // read
     f3a:	a8 e3       	ldi	r26, 0x38	; 56
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e8 e3       	ldi	r30, 0x38	; 56
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	82 60       	ori	r24, 0x02	; 2
     f46:	8c 93       	st	X, r24
	LCD_control &= ~ (1<<RS_switch);
     f48:	a8 e3       	ldi	r26, 0x38	; 56
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e8 e3       	ldi	r30, 0x38	; 56
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8b 7f       	andi	r24, 0xFB	; 251
     f54:	8c 93       	st	X, r24

	//	while (LCD_port >= 0x80)
	//	{
	LCD_lcd_kick ();
     f56:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD_lcd_kick>
	//	}

	//	_delay_ms (500) ;
	DataDir_LCD_port = 0xFF; //0xFF means 0b11111111
     f5a:	ea e3       	ldi	r30, 0x3A	; 58
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	80 83       	st	Z, r24
	LCD_control &= ~ (1<<ReadWrite); //write
     f62:	a8 e3       	ldi	r26, 0x38	; 56
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e8 e3       	ldi	r30, 0x38	; 56
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8d 7f       	andi	r24, 0xFD	; 253
     f6e:	8c 93       	st	X, r24
}
     f70:	0f 90       	pop	r0
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <LCD_lcd_kick>:




void LCD_lcd_kick ()
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	2e 97       	sbiw	r28, 0x0e	; 14
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
	LCD_control &= ~ (1<<EN_switch);
     f8c:	a8 e3       	ldi	r26, 0x38	; 56
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	e8 e3       	ldi	r30, 0x38	; 56
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	8e 7f       	andi	r24, 0xFE	; 254
     f98:	8c 93       	st	X, r24
	asm volatile ("nop");
     f9a:	00 00       	nop
	asm volatile ("nop");
     f9c:	00 00       	nop
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a8 e4       	ldi	r26, 0x48	; 72
     fa4:	b2 e4       	ldi	r27, 0x42	; 66
     fa6:	8b 87       	std	Y+11, r24	; 0x0b
     fa8:	9c 87       	std	Y+12, r25	; 0x0c
     faa:	ad 87       	std	Y+13, r26	; 0x0d
     fac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fae:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	4a ef       	ldi	r20, 0xFA	; 250
     fbc:	54 e4       	ldi	r21, 0x44	; 68
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	8f 83       	std	Y+7, r24	; 0x07
     fc8:	98 87       	std	Y+8, r25	; 0x08
     fca:	a9 87       	std	Y+9, r26	; 0x09
     fcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	78 85       	ldd	r23, Y+8	; 0x08
     fd2:	89 85       	ldd	r24, Y+9	; 0x09
     fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e8       	ldi	r20, 0x80	; 128
     fdc:	5f e3       	ldi	r21, 0x3F	; 63
     fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe2:	88 23       	and	r24, r24
     fe4:	2c f4       	brge	.+10     	; 0xff0 <LCD_lcd_kick+0x78>
		__ticks = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9e 83       	std	Y+6, r25	; 0x06
     fec:	8d 83       	std	Y+5, r24	; 0x05
     fee:	3f c0       	rjmp	.+126    	; 0x106e <LCD_lcd_kick+0xf6>
	else if (__tmp > 65535)
     ff0:	6f 81       	ldd	r22, Y+7	; 0x07
     ff2:	78 85       	ldd	r23, Y+8	; 0x08
     ff4:	89 85       	ldd	r24, Y+9	; 0x09
     ff6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	3f ef       	ldi	r19, 0xFF	; 255
     ffc:	4f e7       	ldi	r20, 0x7F	; 127
     ffe:	57 e4       	ldi	r21, 0x47	; 71
    1000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1004:	18 16       	cp	r1, r24
    1006:	4c f5       	brge	.+82     	; 0x105a <LCD_lcd_kick+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1008:	6b 85       	ldd	r22, Y+11	; 0x0b
    100a:	7c 85       	ldd	r23, Y+12	; 0x0c
    100c:	8d 85       	ldd	r24, Y+13	; 0x0d
    100e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	9e 83       	std	Y+6, r25	; 0x06
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <LCD_lcd_kick+0xd8>
    1032:	88 ec       	ldi	r24, 0xC8	; 200
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	9c 83       	std	Y+4, r25	; 0x04
    1038:	8b 83       	std	Y+3, r24	; 0x03
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <LCD_lcd_kick+0xc6>
    1042:	9c 83       	std	Y+4, r25	; 0x04
    1044:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	9e 83       	std	Y+6, r25	; 0x06
    104e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1050:	8d 81       	ldd	r24, Y+5	; 0x05
    1052:	9e 81       	ldd	r25, Y+6	; 0x06
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	69 f7       	brne	.-38     	; 0x1032 <LCD_lcd_kick+0xba>
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <LCD_lcd_kick+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105a:	6f 81       	ldd	r22, Y+7	; 0x07
    105c:	78 85       	ldd	r23, Y+8	; 0x08
    105e:	89 85       	ldd	r24, Y+9	; 0x09
    1060:	9a 85       	ldd	r25, Y+10	; 0x0a
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	9e 83       	std	Y+6, r25	; 0x06
    106c:	8d 83       	std	Y+5, r24	; 0x05
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	89 83       	std	Y+1, r24	; 0x01
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_lcd_kick+0x102>
    107e:	9a 83       	std	Y+2, r25	; 0x02
    1080:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (50) ;
	LCD_control |= 1<<EN_switch;
    1082:	a8 e3       	ldi	r26, 0x38	; 56
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e8 e3       	ldi	r30, 0x38	; 56
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	8c 93       	st	X, r24
}
    1090:	2e 96       	adiw	r28, 0x0e	; 14
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <LCD_Send_A_Command>:


void LCD_Send_A_Command(unsigned char command)
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
    10ae:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_check_lcd_isbusy>

	LCD_port = command  ;
    10b2:	eb e3       	ldi	r30, 0x3B	; 59
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	80 83       	st	Z, r24
	LCD_control &= ~ ((1<<ReadWrite)|(1<<RS_switch));
    10ba:	a8 e3       	ldi	r26, 0x38	; 56
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e3       	ldi	r30, 0x38	; 56
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	89 7f       	andi	r24, 0xF9	; 249
    10c6:	8c 93       	st	X, r24
	LCD_lcd_kick ();
    10c8:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD_lcd_kick>
	LCD_control &= ~ ((1<<ReadWrite)|(1<<RS_switch));
	//LCD_VoidLcd_referish();
	LCD_lcd_kick ();
#endif

}
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <LCD_Send_A_Command_4mode>:

void LCD_Send_A_Command_4mode(unsigned char command)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	89 83       	std	Y+1, r24	; 0x01
	LCD_check_lcd_isbusy();
    10e0:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_check_lcd_isbusy>
	LCD_port&= 0x0F;
    10e4:	ab e3       	ldi	r26, 0x3B	; 59
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	eb e3       	ldi	r30, 0x3B	; 59
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	8f 70       	andi	r24, 0x0F	; 15
    10f0:	8c 93       	st	X, r24
	LCD_port |= (command&0xF0);
    10f2:	ab e3       	ldi	r26, 0x3B	; 59
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	eb e3       	ldi	r30, 0x3B	; 59
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	98 2f       	mov	r25, r24
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	80 7f       	andi	r24, 0xF0	; 240
    1102:	89 2b       	or	r24, r25
    1104:	8c 93       	st	X, r24
	LCD_control &= ~ ((1<<ReadWrite)|(1<<RS_switch));
    1106:	a8 e3       	ldi	r26, 0x38	; 56
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	e8 e3       	ldi	r30, 0x38	; 56
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	89 7f       	andi	r24, 0xF9	; 249
    1112:	8c 93       	st	X, r24
	LCD_lcd_kick ();
    1114:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD_lcd_kick>
	LCD_control &= 0x0F;  // Make Data Nibble as 0000
    1118:	a8 e3       	ldi	r26, 0x38	; 56
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e8 e3       	ldi	r30, 0x38	; 56
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	8f 70       	andi	r24, 0x0F	; 15
    1124:	8c 93       	st	X, r24
	LCD_control |= ((command<<4)&0xF0);
    1126:	a8 e3       	ldi	r26, 0x38	; 56
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e8 e3       	ldi	r30, 0x38	; 56
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	28 2f       	mov	r18, r24
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	88 2f       	mov	r24, r24
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	82 95       	swap	r24
    113a:	92 95       	swap	r25
    113c:	90 7f       	andi	r25, 0xF0	; 240
    113e:	98 27       	eor	r25, r24
    1140:	80 7f       	andi	r24, 0xF0	; 240
    1142:	98 27       	eor	r25, r24
    1144:	82 2b       	or	r24, r18
    1146:	8c 93       	st	X, r24
	LCD_lcd_kick ();
    1148:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD_lcd_kick>
	//LCD_port = 0;
}
    114c:	0f 90       	pop	r0
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <LCD_Send_A_Character>:




void LCD_Send_A_Character(unsigned char character)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	0f 92       	push	r0
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	89 83       	std	Y+1, r24	; 0x01

#ifdef EIGHT_BIT_MODE
	LCD_check_lcd_isbusy();
    1160:	0e 94 92 07 	call	0xf24	; 0xf24 <LCD_check_lcd_isbusy>

	LCD_control |= 1<<RS_switch; //turn RS ON for Data mode.
    1164:	a8 e3       	ldi	r26, 0x38	; 56
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 e3       	ldi	r30, 0x38	; 56
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	84 60       	ori	r24, 0x04	; 4
    1170:	8c 93       	st	X, r24
	LCD_port = ( ( (character  ) << DATA_shift)   )  ;
    1172:	eb e3       	ldi	r30, 0x3B	; 59
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	80 83       	st	Z, r24
	LCD_control |= 1<<RS_switch; //turn RS ON for Data mode.
    117a:	a8 e3       	ldi	r26, 0x38	; 56
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e8 e3       	ldi	r30, 0x38	; 56
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	84 60       	ori	r24, 0x04	; 4
    1186:	8c 93       	st	X, r24
	LCD_control &= ~ (1<<ReadWrite);//turn RW off so you can write.
    1188:	a8 e3       	ldi	r26, 0x38	; 56
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e8 e3       	ldi	r30, 0x38	; 56
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	8d 7f       	andi	r24, 0xFD	; 253
    1194:	8c 93       	st	X, r24


	LCD_lcd_kick ();
    1196:	0e 94 bc 07 	call	0xf78	; 0xf78 <LCD_lcd_kick>
	LCD_lcd_kick ();

#endif


}
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <LCD_Send_A_String>:

void LCD_Send_A_String(char *StringOfCharacters)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <LCD_Send_A_String+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <LCD_Send_A_String+0x8>
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	9c 83       	std	Y+4, r25	; 0x04
    11b0:	8b 83       	std	Y+3, r24	; 0x03


	int count=0 ;//to count how much char on the line (it should be 16 char only)
    11b2:	1a 82       	std	Y+2, r1	; 0x02
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	2c c0       	rjmp	.+88     	; 0x1210 <LCD_Send_A_String+0x6e>
	while(*StringOfCharacters > 0)
	{
		count++;
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	89 83       	std	Y+1, r24	; 0x01
		LCD_Send_A_Character(*StringOfCharacters++);
    11c2:	eb 81       	ldd	r30, Y+3	; 0x03
    11c4:	fc 81       	ldd	r31, Y+4	; 0x04
    11c6:	20 81       	ld	r18, Z
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	82 2f       	mov	r24, r18
    11d4:	0e 94 aa 08 	call	0x1154	; 0x1154 <LCD_Send_A_Character>
		if (count == 16  ) // go to the second line
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	9a 81       	ldd	r25, Y+2	; 0x02
    11dc:	80 31       	cpi	r24, 0x10	; 16
    11de:	91 05       	cpc	r25, r1
    11e0:	29 f4       	brne	.+10     	; 0x11ec <LCD_Send_A_String+0x4a>
		{
			LCD_GotoXY(1,0); //line 1 position zero
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	0e 94 71 07 	call	0xee2	; 0xee2 <LCD_GotoXY>
    11ea:	12 c0       	rjmp	.+36     	; 0x1210 <LCD_Send_A_String+0x6e>
		}
		else if (count == 32 || count==33) // clear screen and show again
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	9a 81       	ldd	r25, Y+2	; 0x02
    11f0:	80 32       	cpi	r24, 0x20	; 32
    11f2:	91 05       	cpc	r25, r1
    11f4:	29 f0       	breq	.+10     	; 0x1200 <LCD_Send_A_String+0x5e>
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	81 32       	cpi	r24, 0x21	; 33
    11fc:	91 05       	cpc	r25, r1
    11fe:	41 f4       	brne	.+16     	; 0x1210 <LCD_Send_A_String+0x6e>
		{
			LCD_clear_screen();
    1200:	0e 94 67 07 	call	0xece	; 0xece <LCD_clear_screen>
			LCD_GotoXY(0,0); //line 0 position zero
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	0e 94 71 07 	call	0xee2	; 0xee2 <LCD_GotoXY>
			count = 0 ;
    120c:	1a 82       	std	Y+2, r1	; 0x02
    120e:	19 82       	std	Y+1, r1	; 0x01
void LCD_Send_A_String(char *StringOfCharacters)
{


	int count=0 ;//to count how much char on the line (it should be 16 char only)
	while(*StringOfCharacters > 0)
    1210:	eb 81       	ldd	r30, Y+3	; 0x03
    1212:	fc 81       	ldd	r31, Y+4	; 0x04
    1214:	80 81       	ld	r24, Z
    1216:	88 23       	and	r24, r24
    1218:	79 f6       	brne	.-98     	; 0x11b8 <LCD_Send_A_String+0x16>
			LCD_clear_screen();
			LCD_GotoXY(0,0); //line 0 position zero
			count = 0 ;
		}
	}
}
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <LCD_display_number>:


void LCD_display_number (int Number )
{
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	29 97       	sbiw	r28, 0x09	; 9
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	99 87       	std	Y+9, r25	; 0x09
    123e:	88 87       	std	Y+8, r24	; 0x08

	char  str[7];

	sprintf(str,"%d",Number);	// Adjust the formatting to your liking.
    1240:	00 d0       	rcall	.+0      	; 0x1242 <LCD_display_number+0x1a>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <LCD_display_number+0x1c>
    1244:	00 d0       	rcall	.+0      	; 0x1246 <LCD_display_number+0x1e>
    1246:	ed b7       	in	r30, 0x3d	; 61
    1248:	fe b7       	in	r31, 0x3e	; 62
    124a:	31 96       	adiw	r30, 0x01	; 1
    124c:	ce 01       	movw	r24, r28
    124e:	01 96       	adiw	r24, 0x01	; 1
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
    1254:	80 e6       	ldi	r24, 0x60	; 96
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	93 83       	std	Z+3, r25	; 0x03
    125a:	82 83       	std	Z+2, r24	; 0x02
    125c:	88 85       	ldd	r24, Y+8	; 0x08
    125e:	99 85       	ldd	r25, Y+9	; 0x09
    1260:	95 83       	std	Z+5, r25	; 0x05
    1262:	84 83       	std	Z+4, r24	; 0x04
    1264:	0e 94 06 13 	call	0x260c	; 0x260c <sprintf>
    1268:	8d b7       	in	r24, 0x3d	; 61
    126a:	9e b7       	in	r25, 0x3e	; 62
    126c:	06 96       	adiw	r24, 0x06	; 6
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	9e bf       	out	0x3e, r25	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	8d bf       	out	0x3d, r24	; 61

	LCD_Send_A_String (str) ;
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_Send_A_String>

}
    1280:	29 96       	adiw	r28, 0x09	; 9
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <LCD_display_real_number>:

void LCD_display_real_number (double  Number )
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	a8 97       	sbiw	r28, 0x28	; 40
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	6f 8f       	std	Y+31, r22	; 0x1f
    12a8:	78 a3       	std	Y+32, r23	; 0x20
    12aa:	89 a3       	std	Y+33, r24	; 0x21
    12ac:	9a a3       	std	Y+34, r25	; 0x22

	char  str[16];


	char *tmpSign = (Number < 0) ? "-" : "";
    12ae:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12b0:	78 a1       	ldd	r23, Y+32	; 0x20
    12b2:	89 a1       	ldd	r24, Y+33	; 0x21
    12b4:	9a a1       	ldd	r25, Y+34	; 0x22
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	2c f4       	brge	.+10     	; 0x12d0 <LCD_display_real_number+0x3e>
    12c6:	23 e6       	ldi	r18, 0x63	; 99
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	38 a7       	std	Y+40, r19	; 0x28
    12cc:	2f a3       	std	Y+39, r18	; 0x27
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <LCD_display_real_number+0x46>
    12d0:	45 e6       	ldi	r20, 0x65	; 101
    12d2:	50 e0       	ldi	r21, 0x00	; 0
    12d4:	58 a7       	std	Y+40, r21	; 0x28
    12d6:	4f a3       	std	Y+39, r20	; 0x27
    12d8:	8f a1       	ldd	r24, Y+39	; 0x27
    12da:	98 a5       	ldd	r25, Y+40	; 0x28
    12dc:	9e 87       	std	Y+14, r25	; 0x0e
    12de:	8d 87       	std	Y+13, r24	; 0x0d
	float tmpVal = (Number < 0) ? -Number : Number;
    12e0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    12e2:	78 a1       	ldd	r23, Y+32	; 0x20
    12e4:	89 a1       	ldd	r24, Y+33	; 0x21
    12e6:	9a a1       	ldd	r25, Y+34	; 0x22
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	50 e0       	ldi	r21, 0x00	; 0
    12f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12f4:	88 23       	and	r24, r24
    12f6:	64 f4       	brge	.+24     	; 0x1310 <LCD_display_real_number+0x7e>
    12f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12fa:	98 a1       	ldd	r25, Y+32	; 0x20
    12fc:	a9 a1       	ldd	r26, Y+33	; 0x21
    12fe:	ba a1       	ldd	r27, Y+34	; 0x22
    1300:	9c 01       	movw	r18, r24
    1302:	ad 01       	movw	r20, r26
    1304:	50 58       	subi	r21, 0x80	; 128
    1306:	2b a3       	std	Y+35, r18	; 0x23
    1308:	3c a3       	std	Y+36, r19	; 0x24
    130a:	4d a3       	std	Y+37, r20	; 0x25
    130c:	5e a3       	std	Y+38, r21	; 0x26
    130e:	08 c0       	rjmp	.+16     	; 0x1320 <LCD_display_real_number+0x8e>
    1310:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1312:	98 a1       	ldd	r25, Y+32	; 0x20
    1314:	a9 a1       	ldd	r26, Y+33	; 0x21
    1316:	ba a1       	ldd	r27, Y+34	; 0x22
    1318:	8b a3       	std	Y+35, r24	; 0x23
    131a:	9c a3       	std	Y+36, r25	; 0x24
    131c:	ad a3       	std	Y+37, r26	; 0x25
    131e:	be a3       	std	Y+38, r27	; 0x26
    1320:	2b a1       	ldd	r18, Y+35	; 0x23
    1322:	3c a1       	ldd	r19, Y+36	; 0x24
    1324:	4d a1       	ldd	r20, Y+37	; 0x25
    1326:	5e a1       	ldd	r21, Y+38	; 0x26
    1328:	29 87       	std	Y+9, r18	; 0x09
    132a:	3a 87       	std	Y+10, r19	; 0x0a
    132c:	4b 87       	std	Y+11, r20	; 0x0b
    132e:	5c 87       	std	Y+12, r21	; 0x0c

	int tmpInt1 = tmpVal;                  // Get the integer (678).
    1330:	69 85       	ldd	r22, Y+9	; 0x09
    1332:	7a 85       	ldd	r23, Y+10	; 0x0a
    1334:	8b 85       	ldd	r24, Y+11	; 0x0b
    1336:	9c 85       	ldd	r25, Y+12	; 0x0c
    1338:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	98 87       	std	Y+8, r25	; 0x08
    1342:	8f 83       	std	Y+7, r24	; 0x07
	float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
    1344:	8f 81       	ldd	r24, Y+7	; 0x07
    1346:	98 85       	ldd	r25, Y+8	; 0x08
    1348:	aa 27       	eor	r26, r26
    134a:	97 fd       	sbrc	r25, 7
    134c:	a0 95       	com	r26
    134e:	ba 2f       	mov	r27, r26
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1358:	9b 01       	movw	r18, r22
    135a:	ac 01       	movw	r20, r24
    135c:	69 85       	ldd	r22, Y+9	; 0x09
    135e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1360:	8b 85       	ldd	r24, Y+11	; 0x0b
    1362:	9c 85       	ldd	r25, Y+12	; 0x0c
    1364:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	8b 83       	std	Y+3, r24	; 0x03
    136e:	9c 83       	std	Y+4, r25	; 0x04
    1370:	ad 83       	std	Y+5, r26	; 0x05
    1372:	be 83       	std	Y+6, r27	; 0x06
	int tmpInt2 = tmpFrac * 10000;  // Turn into integer (123).
    1374:	6b 81       	ldd	r22, Y+3	; 0x03
    1376:	7c 81       	ldd	r23, Y+4	; 0x04
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e4       	ldi	r19, 0x40	; 64
    1380:	4c e1       	ldi	r20, 0x1C	; 28
    1382:	56 e4       	ldi	r21, 0x46	; 70
    1384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9a 83       	std	Y+2, r25	; 0x02
    139a:	89 83       	std	Y+1, r24	; 0x01

	// Print as parts, note that you need 0-padding for fractional bit.

	sprintf (str, "%s%d.%04d", tmpSign, tmpInt1, tmpInt2);
    139c:	4d b7       	in	r20, 0x3d	; 61
    139e:	5e b7       	in	r21, 0x3e	; 62
    13a0:	4a 50       	subi	r20, 0x0A	; 10
    13a2:	50 40       	sbci	r21, 0x00	; 0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	5e bf       	out	0x3e, r21	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	4d bf       	out	0x3d, r20	; 61
    13ae:	ed b7       	in	r30, 0x3d	; 61
    13b0:	fe b7       	in	r31, 0x3e	; 62
    13b2:	31 96       	adiw	r30, 0x01	; 1
    13b4:	ce 01       	movw	r24, r28
    13b6:	0f 96       	adiw	r24, 0x0f	; 15
    13b8:	91 83       	std	Z+1, r25	; 0x01
    13ba:	80 83       	st	Z, r24
    13bc:	86 e6       	ldi	r24, 0x66	; 102
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	93 83       	std	Z+3, r25	; 0x03
    13c2:	82 83       	std	Z+2, r24	; 0x02
    13c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c8:	95 83       	std	Z+5, r25	; 0x05
    13ca:	84 83       	std	Z+4, r24	; 0x04
    13cc:	8f 81       	ldd	r24, Y+7	; 0x07
    13ce:	98 85       	ldd	r25, Y+8	; 0x08
    13d0:	97 83       	std	Z+7, r25	; 0x07
    13d2:	86 83       	std	Z+6, r24	; 0x06
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	9a 81       	ldd	r25, Y+2	; 0x02
    13d8:	91 87       	std	Z+9, r25	; 0x09
    13da:	80 87       	std	Z+8, r24	; 0x08
    13dc:	0e 94 06 13 	call	0x260c	; 0x260c <sprintf>
    13e0:	8d b7       	in	r24, 0x3d	; 61
    13e2:	9e b7       	in	r25, 0x3e	; 62
    13e4:	0a 96       	adiw	r24, 0x0a	; 10
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	f8 94       	cli
    13ea:	9e bf       	out	0x3e, r25	; 62
    13ec:	0f be       	out	0x3f, r0	; 63
    13ee:	8d bf       	out	0x3d, r24	; 61



	LCD_Send_A_String (str) ;
    13f0:	ce 01       	movw	r24, r28
    13f2:	0f 96       	adiw	r24, 0x0f	; 15
    13f4:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <LCD_Send_A_String>

}
    13f8:	a8 96       	adiw	r28, 0x28	; 40
    13fa:	0f b6       	in	r0, 0x3f	; 63
    13fc:	f8 94       	cli
    13fe:	de bf       	out	0x3e, r29	; 62
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	08 95       	ret

0000140a <Keypad_init>:

#include "keypad.h"
int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columnd
void  Keypad_init()
{
    140a:	df 93       	push	r29
    140c:	cf 93       	push	r28
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
	keypadDDR &= ~ (1<<R0)|(1<<R1)|(1<<R2)|(1<<R3);//set upper part of keypad port as input
    1412:	a4 e3       	ldi	r26, 0x34	; 52
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e4 e3       	ldi	r30, 0x34	; 52
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8e 7f       	andi	r24, 0xFE	; 254
    141e:	8c 93       	st	X, r24
	//this will be required for scanning the rows
	keypadDDR |= ((1<<C0)|(1<<C1)|(1<<C2)|(1<<C3));//set lower part of keypad port as output.This is
    1420:	a4 e3       	ldi	r26, 0x34	; 52
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e4 e3       	ldi	r30, 0x34	; 52
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 6f       	ori	r24, 0xF0	; 240
    142c:	8c 93       	st	X, r24
	//the part of the keypad port where the rows are connected.
	keypadPORT = 0xFF ;//to enable C act as PULL UP
    142e:	e5 e3       	ldi	r30, 0x35	; 53
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	80 83       	st	Z, r24
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <Keypad_getkey>:



char Keypad_getkey()
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	27 97       	sbiw	r28, 0x07	; 7
    1446:	0f b6       	in	r0, 0x3f	; 63
    1448:	f8 94       	cli
    144a:	de bf       	out	0x3e, r29	; 62
    144c:	0f be       	out	0x3f, r0	; 63
    144e:	cd bf       	out	0x3d, r28	; 61
	int i, j;
	for(i = 0; i < 4; i++)
    1450:	1c 82       	std	Y+4, r1	; 0x04
    1452:	1b 82       	std	Y+3, r1	; 0x03
    1454:	37 c1       	rjmp	.+622    	; 0x16c4 <Keypad_getkey+0x288>
	{
		keypadPORT |= ((1<<Key_padCol[0] ) | (1<<Key_padCol[1] ) | (1<<Key_padCol[2] ) | (1<<Key_padCol[3] ));
    1456:	a5 e3       	ldi	r26, 0x35	; 53
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e3       	ldi	r30, 0x35	; 53
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	58 2f       	mov	r21, r24
    1462:	20 91 80 01 	lds	r18, 0x0180
    1466:	30 91 81 01 	lds	r19, 0x0181
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <Keypad_getkey+0x38>
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	2a 95       	dec	r18
    1476:	e2 f7       	brpl	.-8      	; 0x1470 <Keypad_getkey+0x34>
    1478:	48 2f       	mov	r20, r24
    147a:	20 91 82 01 	lds	r18, 0x0182
    147e:	30 91 83 01 	lds	r19, 0x0183
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 c0       	rjmp	.+4      	; 0x148c <Keypad_getkey+0x50>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	2a 95       	dec	r18
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <Keypad_getkey+0x4c>
    1490:	48 2b       	or	r20, r24
    1492:	20 91 84 01 	lds	r18, 0x0184
    1496:	30 91 85 01 	lds	r19, 0x0185
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <Keypad_getkey+0x68>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	2a 95       	dec	r18
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <Keypad_getkey+0x64>
    14a8:	48 2b       	or	r20, r24
    14aa:	20 91 86 01 	lds	r18, 0x0186
    14ae:	30 91 87 01 	lds	r19, 0x0187
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <Keypad_getkey+0x80>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	2a 95       	dec	r18
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <Keypad_getkey+0x7c>
    14c0:	84 2b       	or	r24, r20
    14c2:	85 2b       	or	r24, r21
    14c4:	8c 93       	st	X, r24

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad
    14c6:	a5 e3       	ldi	r26, 0x35	; 53
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e5 e3       	ldi	r30, 0x35	; 53
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	48 2f       	mov	r20, r24
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	fc 01       	movw	r30, r24
    14dc:	e0 58       	subi	r30, 0x80	; 128
    14de:	fe 4f       	sbci	r31, 0xFE	; 254
    14e0:	20 81       	ld	r18, Z
    14e2:	31 81       	ldd	r19, Z+1	; 0x01
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <Keypad_getkey+0xb4>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <Keypad_getkey+0xb0>
    14f4:	80 95       	com	r24
    14f6:	84 23       	and	r24, r20
    14f8:	8c 93       	st	X, r24

		for(j = 0; j < 4; j++)
    14fa:	1a 82       	std	Y+2, r1	; 0x02
    14fc:	19 82       	std	Y+1, r1	; 0x01
    14fe:	d7 c0       	rjmp	.+430    	; 0x16ae <Keypad_getkey+0x272>
		{
			if(!(keypadPIN & (1<<Key_padRow[j])))//check if key is pressed
    1500:	e3 e3       	ldi	r30, 0x33	; 51
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	9a 81       	ldd	r25, Y+2	; 0x02
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	fc 01       	movw	r30, r24
    1514:	e8 58       	subi	r30, 0x88	; 136
    1516:	fe 4f       	sbci	r31, 0xFE	; 254
    1518:	80 81       	ld	r24, Z
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	a9 01       	movw	r20, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <Keypad_getkey+0xe8>
    1520:	55 95       	asr	r21
    1522:	47 95       	ror	r20
    1524:	8a 95       	dec	r24
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <Keypad_getkey+0xe4>
    1528:	ca 01       	movw	r24, r20
    152a:	81 70       	andi	r24, 0x01	; 1
    152c:	90 70       	andi	r25, 0x00	; 0
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	09 f0       	breq	.+2      	; 0x1534 <Keypad_getkey+0xf8>
    1532:	b8 c0       	rjmp	.+368    	; 0x16a4 <Keypad_getkey+0x268>
			{
				while(!(keypadPIN & (1<<Key_padRow[j])));  //wait for key to be released  (Single press)
    1534:	e3 e3       	ldi	r30, 0x33	; 51
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	fc 01       	movw	r30, r24
    1548:	e8 58       	subi	r30, 0x88	; 136
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	a9 01       	movw	r20, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <Keypad_getkey+0x11c>
    1554:	55 95       	asr	r21
    1556:	47 95       	ror	r20
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <Keypad_getkey+0x118>
    155c:	ca 01       	movw	r24, r20
    155e:	81 70       	andi	r24, 0x01	; 1
    1560:	90 70       	andi	r25, 0x00	; 0
    1562:	00 97       	sbiw	r24, 0x00	; 0
    1564:	39 f3       	breq	.-50     	; 0x1534 <Keypad_getkey+0xf8>
				switch(i)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	9f 83       	std	Y+7, r25	; 0x07
    156c:	8e 83       	std	Y+6, r24	; 0x06
    156e:	4e 81       	ldd	r20, Y+6	; 0x06
    1570:	5f 81       	ldd	r21, Y+7	; 0x07
    1572:	41 30       	cpi	r20, 0x01	; 1
    1574:	51 05       	cpc	r21, r1
    1576:	c1 f1       	breq	.+112    	; 0x15e8 <Keypad_getkey+0x1ac>
    1578:	8e 81       	ldd	r24, Y+6	; 0x06
    157a:	9f 81       	ldd	r25, Y+7	; 0x07
    157c:	82 30       	cpi	r24, 0x02	; 2
    157e:	91 05       	cpc	r25, r1
    1580:	34 f4       	brge	.+12     	; 0x158e <Keypad_getkey+0x152>
    1582:	4e 81       	ldd	r20, Y+6	; 0x06
    1584:	5f 81       	ldd	r21, Y+7	; 0x07
    1586:	41 15       	cp	r20, r1
    1588:	51 05       	cpc	r21, r1
    158a:	71 f0       	breq	.+28     	; 0x15a8 <Keypad_getkey+0x16c>
    158c:	8b c0       	rjmp	.+278    	; 0x16a4 <Keypad_getkey+0x268>
    158e:	8e 81       	ldd	r24, Y+6	; 0x06
    1590:	9f 81       	ldd	r25, Y+7	; 0x07
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	91 05       	cpc	r25, r1
    1596:	09 f4       	brne	.+2      	; 0x159a <Keypad_getkey+0x15e>
    1598:	47 c0       	rjmp	.+142    	; 0x1628 <Keypad_getkey+0x1ec>
    159a:	4e 81       	ldd	r20, Y+6	; 0x06
    159c:	5f 81       	ldd	r21, Y+7	; 0x07
    159e:	43 30       	cpi	r20, 0x03	; 3
    15a0:	51 05       	cpc	r21, r1
    15a2:	09 f4       	brne	.+2      	; 0x15a6 <Keypad_getkey+0x16a>
    15a4:	60 c0       	rjmp	.+192    	; 0x1666 <Keypad_getkey+0x22a>
    15a6:	7e c0       	rjmp	.+252    	; 0x16a4 <Keypad_getkey+0x268>
				{
				case(0):
                	{
					if (j == 0) return '7';
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	9a 81       	ldd	r25, Y+2	; 0x02
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <Keypad_getkey+0x17a>
    15b0:	57 e3       	ldi	r21, 0x37	; 55
    15b2:	5d 83       	std	Y+5, r21	; 0x05
    15b4:	8f c0       	rjmp	.+286    	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 1) return '4';
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	91 05       	cpc	r25, r1
    15be:	19 f4       	brne	.+6      	; 0x15c6 <Keypad_getkey+0x18a>
    15c0:	84 e3       	ldi	r24, 0x34	; 52
    15c2:	8d 83       	std	Y+5, r24	; 0x05
    15c4:	87 c0       	rjmp	.+270    	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 2) return '1';
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	82 30       	cpi	r24, 0x02	; 2
    15cc:	91 05       	cpc	r25, r1
    15ce:	19 f4       	brne	.+6      	; 0x15d6 <Keypad_getkey+0x19a>
    15d0:	91 e3       	ldi	r25, 0x31	; 49
    15d2:	9d 83       	std	Y+5, r25	; 0x05
    15d4:	7f c0       	rjmp	.+254    	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 3) return '?';
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	83 30       	cpi	r24, 0x03	; 3
    15dc:	91 05       	cpc	r25, r1
    15de:	09 f0       	breq	.+2      	; 0x15e2 <Keypad_getkey+0x1a6>
    15e0:	61 c0       	rjmp	.+194    	; 0x16a4 <Keypad_getkey+0x268>
    15e2:	4f e3       	ldi	r20, 0x3F	; 63
    15e4:	4d 83       	std	Y+5, r20	; 0x05
    15e6:	76 c0       	rjmp	.+236    	; 0x16d4 <Keypad_getkey+0x298>
					break;
                	}
				case(1):
                	{
					if (j == 0) return '8';
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	19 f4       	brne	.+6      	; 0x15f6 <Keypad_getkey+0x1ba>
    15f0:	58 e3       	ldi	r21, 0x38	; 56
    15f2:	5d 83       	std	Y+5, r21	; 0x05
    15f4:	6f c0       	rjmp	.+222    	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 1) return '5';
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	9a 81       	ldd	r25, Y+2	; 0x02
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	91 05       	cpc	r25, r1
    15fe:	19 f4       	brne	.+6      	; 0x1606 <Keypad_getkey+0x1ca>
    1600:	85 e3       	ldi	r24, 0x35	; 53
    1602:	8d 83       	std	Y+5, r24	; 0x05
    1604:	67 c0       	rjmp	.+206    	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 2) return '2';
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	91 05       	cpc	r25, r1
    160e:	19 f4       	brne	.+6      	; 0x1616 <Keypad_getkey+0x1da>
    1610:	92 e3       	ldi	r25, 0x32	; 50
    1612:	9d 83       	std	Y+5, r25	; 0x05
    1614:	5f c0       	rjmp	.+190    	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 3) return '0';
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	9a 81       	ldd	r25, Y+2	; 0x02
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	09 f0       	breq	.+2      	; 0x1622 <Keypad_getkey+0x1e6>
    1620:	41 c0       	rjmp	.+130    	; 0x16a4 <Keypad_getkey+0x268>
    1622:	40 e3       	ldi	r20, 0x30	; 48
    1624:	4d 83       	std	Y+5, r20	; 0x05
    1626:	56 c0       	rjmp	.+172    	; 0x16d4 <Keypad_getkey+0x298>
					break;
                	}
				case(2):
                	{
					if (j == 0) return '9';
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	9a 81       	ldd	r25, Y+2	; 0x02
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	19 f4       	brne	.+6      	; 0x1636 <Keypad_getkey+0x1fa>
    1630:	59 e3       	ldi	r21, 0x39	; 57
    1632:	5d 83       	std	Y+5, r21	; 0x05
    1634:	4f c0       	rjmp	.+158    	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 1) return '6';
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	91 05       	cpc	r25, r1
    163e:	19 f4       	brne	.+6      	; 0x1646 <Keypad_getkey+0x20a>
    1640:	86 e3       	ldi	r24, 0x36	; 54
    1642:	8d 83       	std	Y+5, r24	; 0x05
    1644:	47 c0       	rjmp	.+142    	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 2) return '3';
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
    164a:	82 30       	cpi	r24, 0x02	; 2
    164c:	91 05       	cpc	r25, r1
    164e:	19 f4       	brne	.+6      	; 0x1656 <Keypad_getkey+0x21a>
    1650:	93 e3       	ldi	r25, 0x33	; 51
    1652:	9d 83       	std	Y+5, r25	; 0x05
    1654:	3f c0       	rjmp	.+126    	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 3) return '=';
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	9a 81       	ldd	r25, Y+2	; 0x02
    165a:	83 30       	cpi	r24, 0x03	; 3
    165c:	91 05       	cpc	r25, r1
    165e:	11 f5       	brne	.+68     	; 0x16a4 <Keypad_getkey+0x268>
    1660:	4d e3       	ldi	r20, 0x3D	; 61
    1662:	4d 83       	std	Y+5, r20	; 0x05
    1664:	37 c0       	rjmp	.+110    	; 0x16d4 <Keypad_getkey+0x298>
					break;
                	}
				case(3):
                	{
					if (j == 0) return '/';
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	00 97       	sbiw	r24, 0x00	; 0
    166c:	19 f4       	brne	.+6      	; 0x1674 <Keypad_getkey+0x238>
    166e:	5f e2       	ldi	r21, 0x2F	; 47
    1670:	5d 83       	std	Y+5, r21	; 0x05
    1672:	30 c0       	rjmp	.+96     	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 1) return '*';
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	19 f4       	brne	.+6      	; 0x1684 <Keypad_getkey+0x248>
    167e:	8a e2       	ldi	r24, 0x2A	; 42
    1680:	8d 83       	std	Y+5, r24	; 0x05
    1682:	28 c0       	rjmp	.+80     	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 2) return '-';
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	9a 81       	ldd	r25, Y+2	; 0x02
    1688:	82 30       	cpi	r24, 0x02	; 2
    168a:	91 05       	cpc	r25, r1
    168c:	19 f4       	brne	.+6      	; 0x1694 <Keypad_getkey+0x258>
    168e:	9d e2       	ldi	r25, 0x2D	; 45
    1690:	9d 83       	std	Y+5, r25	; 0x05
    1692:	20 c0       	rjmp	.+64     	; 0x16d4 <Keypad_getkey+0x298>
					else if (j == 3) return '+';
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	9a 81       	ldd	r25, Y+2	; 0x02
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	19 f4       	brne	.+6      	; 0x16a4 <Keypad_getkey+0x268>
    169e:	4b e2       	ldi	r20, 0x2B	; 43
    16a0:	4d 83       	std	Y+5, r20	; 0x05
    16a2:	18 c0       	rjmp	.+48     	; 0x16d4 <Keypad_getkey+0x298>
	{
		keypadPORT |= ((1<<Key_padCol[0] ) | (1<<Key_padCol[1] ) | (1<<Key_padCol[2] ) | (1<<Key_padCol[3] ));

		keypadPORT &= ~ (1 << Key_padCol[i]);//send a low to a particular row of the keypad

		for(j = 0; j < 4; j++)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	9a 81       	ldd	r25, Y+2	; 0x02
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	9a 83       	std	Y+2, r25	; 0x02
    16ac:	89 83       	std	Y+1, r24	; 0x01
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	91 05       	cpc	r25, r1
    16b6:	0c f4       	brge	.+2      	; 0x16ba <Keypad_getkey+0x27e>
    16b8:	23 cf       	rjmp	.-442    	; 0x1500 <Keypad_getkey+0xc4>


char Keypad_getkey()
{
	int i, j;
	for(i = 0; i < 4; i++)
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	9c 81       	ldd	r25, Y+4	; 0x04
    16be:	01 96       	adiw	r24, 0x01	; 1
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	8b 83       	std	Y+3, r24	; 0x03
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	84 30       	cpi	r24, 0x04	; 4
    16ca:	91 05       	cpc	r25, r1
    16cc:	0c f4       	brge	.+2      	; 0x16d0 <Keypad_getkey+0x294>
    16ce:	c3 ce       	rjmp	.-634    	; 0x1456 <Keypad_getkey+0x1a>
                	}
				}
			}
		}
	}
	return 'A';//Return 'A' if no key is pressed.
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	5d 83       	std	Y+5, r21	; 0x05
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    16d6:	27 96       	adiw	r28, 0x07	; 7
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <USART_Init>:

struct USART_Config global_USART_Config ;


/*********************************/
 void USART_Init(struct USART_Config Config) {
    16e8:	0f 93       	push	r16
    16ea:	1f 93       	push	r17
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	62 97       	sbiw	r28, 0x12	; 18
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	0d 83       	std	Y+5, r16	; 0x05
    1702:	1e 83       	std	Y+6, r17	; 0x06
    1704:	2f 83       	std	Y+7, r18	; 0x07
    1706:	38 87       	std	Y+8, r19	; 0x08
    1708:	49 87       	std	Y+9, r20	; 0x09
    170a:	5a 87       	std	Y+10, r21	; 0x0a
    170c:	6b 87       	std	Y+11, r22	; 0x0b
    170e:	7c 87       	std	Y+12, r23	; 0x0c
    1710:	8d 87       	std	Y+13, r24	; 0x0d

	unsigned long UBRR_VAL ;
	global_USART_Config = Config ;
    1712:	8a ea       	ldi	r24, 0xAA	; 170
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	9f 87       	std	Y+15, r25	; 0x0f
    1718:	8e 87       	std	Y+14, r24	; 0x0e
    171a:	fe 01       	movw	r30, r28
    171c:	35 96       	adiw	r30, 0x05	; 5
    171e:	f9 8b       	std	Y+17, r31	; 0x11
    1720:	e8 8b       	std	Y+16, r30	; 0x10
    1722:	f9 e0       	ldi	r31, 0x09	; 9
    1724:	fa 8b       	std	Y+18, r31	; 0x12
    1726:	e8 89       	ldd	r30, Y+16	; 0x10
    1728:	f9 89       	ldd	r31, Y+17	; 0x11
    172a:	00 80       	ld	r0, Z
    172c:	88 89       	ldd	r24, Y+16	; 0x10
    172e:	99 89       	ldd	r25, Y+17	; 0x11
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	99 8b       	std	Y+17, r25	; 0x11
    1734:	88 8b       	std	Y+16, r24	; 0x10
    1736:	ee 85       	ldd	r30, Y+14	; 0x0e
    1738:	ff 85       	ldd	r31, Y+15	; 0x0f
    173a:	00 82       	st	Z, r0
    173c:	8e 85       	ldd	r24, Y+14	; 0x0e
    173e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	9f 87       	std	Y+15, r25	; 0x0f
    1744:	8e 87       	std	Y+14, r24	; 0x0e
    1746:	9a 89       	ldd	r25, Y+18	; 0x12
    1748:	91 50       	subi	r25, 0x01	; 1
    174a:	9a 8b       	std	Y+18, r25	; 0x12
    174c:	ea 89       	ldd	r30, Y+18	; 0x12
    174e:	ee 23       	and	r30, r30
    1750:	51 f7       	brne	.-44     	; 0x1726 <USART_Init+0x3e>


	/************** Set baud rate **************/

	if ((global_USART_Config.SYNCH_MODE == USART_ASYNCH) && (global_USART_Config.SPEED_MODE == USART_NORMAL_SPEED))
    1752:	80 91 aa 01 	lds	r24, 0x01AA
    1756:	88 23       	and	r24, r24
    1758:	69 f4       	brne	.+26     	; 0x1774 <USART_Init+0x8c>
    175a:	80 91 ab 01 	lds	r24, 0x01AB
    175e:	88 23       	and	r24, r24
    1760:	49 f4       	brne	.+18     	; 0x1774 <USART_Init+0x8c>
	{
		UBRR_VAL = (unsigned long)((USART_FOSC/(16*USART_BAUD))-1) ;
    1762:	83 e3       	ldi	r24, 0x33	; 51
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 e0       	ldi	r26, 0x00	; 0
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	9a 83       	std	Y+2, r25	; 0x02
    176e:	ab 83       	std	Y+3, r26	; 0x03
    1770:	bc 83       	std	Y+4, r27	; 0x04
    1772:	1d c0       	rjmp	.+58     	; 0x17ae <USART_Init+0xc6>
	}
	else if ((global_USART_Config.SYNCH_MODE == USART_ASYNCH) && (global_USART_Config.SPEED_MODE == USART_DOUBLE_SPEED))
    1774:	80 91 aa 01 	lds	r24, 0x01AA
    1778:	88 23       	and	r24, r24
    177a:	69 f4       	brne	.+26     	; 0x1796 <USART_Init+0xae>
    177c:	80 91 ab 01 	lds	r24, 0x01AB
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	49 f4       	brne	.+18     	; 0x1796 <USART_Init+0xae>
	{
		UBRR_VAL = (unsigned short)((USART_FOSC/(8*USART_BAUD))-1) ;
    1784:	87 e6       	ldi	r24, 0x67	; 103
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 e0       	ldi	r26, 0x00	; 0
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	9a 83       	std	Y+2, r25	; 0x02
    1790:	ab 83       	std	Y+3, r26	; 0x03
    1792:	bc 83       	std	Y+4, r27	; 0x04
    1794:	0c c0       	rjmp	.+24     	; 0x17ae <USART_Init+0xc6>

	}
	else if  ((global_USART_Config.SYNCH_MODE == USART_SYNC))
    1796:	80 91 aa 01 	lds	r24, 0x01AA
    179a:	80 34       	cpi	r24, 0x40	; 64
    179c:	41 f4       	brne	.+16     	; 0x17ae <USART_Init+0xc6>
	{
		UBRR_VAL = (unsigned long)((USART_FOSC/(2*USART_BAUD))-1) ;
    179e:	8f e9       	ldi	r24, 0x9F	; 159
    17a0:	91 e0       	ldi	r25, 0x01	; 1
    17a2:	a0 e0       	ldi	r26, 0x00	; 0
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	ab 83       	std	Y+3, r26	; 0x03
    17ac:	bc 83       	std	Y+4, r27	; 0x04

	}

	UBRRH =(unsigned char) (UBRR_VAL >> 8);
    17ae:	e0 e4       	ldi	r30, 0x40	; 64
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	ab 81       	ldd	r26, Y+3	; 0x03
    17b8:	bc 81       	ldd	r27, Y+4	; 0x04
    17ba:	89 2f       	mov	r24, r25
    17bc:	9a 2f       	mov	r25, r26
    17be:	ab 2f       	mov	r26, r27
    17c0:	bb 27       	eor	r27, r27
    17c2:	80 83       	st	Z, r24

	UBRRL = (unsigned char) UBRR_VAL;
    17c4:	e9 e2       	ldi	r30, 0x29	; 41
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	80 83       	st	Z, r24

	/************** Enable transmitter **************/
 if ( global_USART_Config.TRANSMIT == USART_TRANSMIT_ENABLE )
    17cc:	80 91 ac 01 	lds	r24, 0x01AC
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	41 f4       	brne	.+16     	; 0x17e4 <USART_Init+0xfc>
 {
	 UCSRB = UCSRB | (1 << TXEN);
    17d4:	aa e2       	ldi	r26, 0x2A	; 42
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	ea e2       	ldi	r30, 0x2A	; 42
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	88 60       	ori	r24, 0x08	; 8
    17e0:	8c 93       	st	X, r24
    17e2:	0b c0       	rjmp	.+22     	; 0x17fa <USART_Init+0x112>

 }
 else if ( global_USART_Config.TRANSMIT == USART_TRANSMIT_DISABLE )
    17e4:	80 91 ac 01 	lds	r24, 0x01AC
    17e8:	88 23       	and	r24, r24
    17ea:	39 f4       	brne	.+14     	; 0x17fa <USART_Init+0x112>
 {

		UCSRB &= ~(1<<TXEN);
    17ec:	aa e2       	ldi	r26, 0x2A	; 42
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ea e2       	ldi	r30, 0x2A	; 42
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	87 7f       	andi	r24, 0xF7	; 247
    17f8:	8c 93       	st	X, r24
 }

	/************** Enable receiver **************/
 if ( global_USART_Config.RECIEVE == USART_RECIEVE_ENABLE )
    17fa:	80 91 ad 01 	lds	r24, 0x01AD
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	41 f4       	brne	.+16     	; 0x1812 <USART_Init+0x12a>
 {
	 UCSRB = UCSRB | (1 << RXEN);
    1802:	aa e2       	ldi	r26, 0x2A	; 42
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	ea e2       	ldi	r30, 0x2A	; 42
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	80 61       	ori	r24, 0x10	; 16
    180e:	8c 93       	st	X, r24
    1810:	0b c0       	rjmp	.+22     	; 0x1828 <USART_Init+0x140>

 }
 else if ( global_USART_Config.RECIEVE == USART_RECIEVE_DISABLE )
    1812:	80 91 ad 01 	lds	r24, 0x01AD
    1816:	88 23       	and	r24, r24
    1818:	39 f4       	brne	.+14     	; 0x1828 <USART_Init+0x140>
 {

		UCSRB &= ~(1<<RXEN);
    181a:	aa e2       	ldi	r26, 0x2A	; 42
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	ea e2       	ldi	r30, 0x2A	; 42
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	8f 7e       	andi	r24, 0xEF	; 239
    1826:	8c 93       	st	X, r24
 }


	/**************** Set character size***************/
 if ( global_USART_Config.CHAR_SIZE != USART_9_Bit_CHAR )
    1828:	80 91 ae 01 	lds	r24, 0x01AE
    182c:	8e 30       	cpi	r24, 0x0E	; 14
    182e:	39 f0       	breq	.+14     	; 0x183e <USART_Init+0x156>
 {
		UCSRC = (1 << URSEL) | (global_USART_Config.CHAR_SIZE);
    1830:	e0 e4       	ldi	r30, 0x40	; 64
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 91 ae 01 	lds	r24, 0x01AE
    1838:	80 68       	ori	r24, 0x80	; 128
    183a:	80 83       	st	Z, r24
    183c:	12 c0       	rjmp	.+36     	; 0x1862 <USART_Init+0x17a>

 }
 else if (global_USART_Config.CHAR_SIZE == USART_9_Bit_CHAR )
    183e:	80 91 ae 01 	lds	r24, 0x01AE
    1842:	8e 30       	cpi	r24, 0x0E	; 14
    1844:	71 f4       	brne	.+28     	; 0x1862 <USART_Init+0x17a>
 {

		UCSRC = (1 << URSEL) |( (global_USART_Config.CHAR_SIZE)&0b11);
    1846:	e0 e4       	ldi	r30, 0x40	; 64
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 91 ae 01 	lds	r24, 0x01AE
    184e:	83 70       	andi	r24, 0x03	; 3
    1850:	80 68       	ori	r24, 0x80	; 128
    1852:	80 83       	st	Z, r24
		UCSRB |= 1<<2 ;
    1854:	aa e2       	ldi	r26, 0x2A	; 42
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	ea e2       	ldi	r30, 0x2A	; 42
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	84 60       	ori	r24, 0x04	; 4
    1860:	8c 93       	st	X, r24
 }


	/**************** Set Double speed***************/
if ((global_USART_Config.SYNCH_MODE == USART_ASYNCH) && (global_USART_Config.SPEED_MODE == USART_DOUBLE_SPEED))
    1862:	80 91 aa 01 	lds	r24, 0x01AA
    1866:	88 23       	and	r24, r24
    1868:	59 f4       	brne	.+22     	; 0x1880 <USART_Init+0x198>
    186a:	80 91 ab 01 	lds	r24, 0x01AB
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	39 f4       	brne	.+14     	; 0x1880 <USART_Init+0x198>
{
	UCSRA |= 1<< U2X ;
    1872:	ab e2       	ldi	r26, 0x2B	; 43
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	eb e2       	ldi	r30, 0x2B	; 43
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	82 60       	ori	r24, 0x02	; 2
    187e:	8c 93       	st	X, r24

}
	/**************** Set Parity Bit***************/
	UCSRC |= (1<<URSEL) | global_USART_Config.PARITY_MODE;
    1880:	a0 e4       	ldi	r26, 0x40	; 64
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e0 e4       	ldi	r30, 0x40	; 64
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	90 81       	ld	r25, Z
    188a:	80 91 af 01 	lds	r24, 0x01AF
    188e:	89 2b       	or	r24, r25
    1890:	80 68       	ori	r24, 0x80	; 128
    1892:	8c 93       	st	X, r24
	/**************** Set SYNCH ASYNCH***************/
	UCSRC |= (1<<URSEL) | global_USART_Config.SYNCH_MODE;
    1894:	a0 e4       	ldi	r26, 0x40	; 64
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e0 e4       	ldi	r30, 0x40	; 64
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	90 81       	ld	r25, Z
    189e:	80 91 aa 01 	lds	r24, 0x01AA
    18a2:	89 2b       	or	r24, r25
    18a4:	80 68       	ori	r24, 0x80	; 128
    18a6:	8c 93       	st	X, r24
	/**************** Set Stop Bit***************/
	UCSRC |= (1<<URSEL) | global_USART_Config.STOPBIT;
    18a8:	a0 e4       	ldi	r26, 0x40	; 64
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e0 e4       	ldi	r30, 0x40	; 64
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	90 81       	ld	r25, Z
    18b2:	80 91 b0 01 	lds	r24, 0x01B0
    18b6:	89 2b       	or	r24, r25
    18b8:	80 68       	ori	r24, 0x80	; 128
    18ba:	8c 93       	st	X, r24
	/***************RECIEVER INT ENABLE**********/
	UCSRB |= global_USART_Config.RECIEVE_INT;
    18bc:	aa e2       	ldi	r26, 0x2A	; 42
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ea e2       	ldi	r30, 0x2A	; 42
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	90 81       	ld	r25, Z
    18c6:	80 91 b1 01 	lds	r24, 0x01B1
    18ca:	89 2b       	or	r24, r25
    18cc:	8c 93       	st	X, r24
	/***************TRANSMITER INT ENABLE**********/
	UCSRB |= global_USART_Config.TRANSMITER_INT;
    18ce:	aa e2       	ldi	r26, 0x2A	; 42
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	ea e2       	ldi	r30, 0x2A	; 42
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	90 81       	ld	r25, Z
    18d8:	80 91 b2 01 	lds	r24, 0x01B2
    18dc:	89 2b       	or	r24, r25
    18de:	8c 93       	st	X, r24
}
    18e0:	62 96       	adiw	r28, 0x12	; 18
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	08 95       	ret

000018f6 <USART_Transmit>:



 void USART_Transmit(unsigned short data) {
    18f6:	df 93       	push	r29
    18f8:	cf 93       	push	r28
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <USART_Transmit+0x6>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	9a 83       	std	Y+2, r25	; 0x02
    1902:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while (!( UCSRA & (1 << UDRE)))
    1904:	eb e2       	ldi	r30, 0x2B	; 43
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	80 72       	andi	r24, 0x20	; 32
    1910:	90 70       	andi	r25, 0x00	; 0
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	b9 f3       	breq	.-18     	; 0x1904 <USART_Transmit+0xe>
		;
	/***********if the data to be transmitted is 9 bits, write the MSB first*****************/
	if ( global_USART_Config.CHAR_SIZE  ==	USART_9_Bit_CHAR )
    1916:	80 91 ae 01 	lds	r24, 0x01AE
    191a:	8e 30       	cpi	r24, 0x0E	; 14
    191c:	61 f4       	brne	.+24     	; 0x1936 <USART_Transmit+0x40>
	{
		UCSRB |= ((data >> 8) & 1);
    191e:	aa e2       	ldi	r26, 0x2A	; 42
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ea e2       	ldi	r30, 0x2A	; 42
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	20 81       	ld	r18, Z
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	9a 81       	ldd	r25, Y+2	; 0x02
    192c:	89 2f       	mov	r24, r25
    192e:	99 27       	eor	r25, r25
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	82 2b       	or	r24, r18
    1934:	8c 93       	st	X, r24
	}
		/* Put data into buffer, sends the data */
	UDR = (unsigned char)data;
    1936:	ec e2       	ldi	r30, 0x2C	; 44
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	80 83       	st	Z, r24
}
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <USART_Receive>:




 unsigned char USART_Receive(unsigned short *Ptr_To_Val) {
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	00 d0       	rcall	.+0      	; 0x194e <USART_Receive+0x6>
    194e:	0f 92       	push	r0
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
    1954:	9b 83       	std	Y+3, r25	; 0x03
    1956:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char local_u8ParityError = 0; // 0 means error
    1958:	19 82       	std	Y+1, r1	; 0x01
	*Ptr_To_Val = 0;
    195a:	ea 81       	ldd	r30, Y+2	; 0x02
    195c:	fb 81       	ldd	r31, Y+3	; 0x03
    195e:	11 82       	std	Z+1, r1	; 0x01
    1960:	10 82       	st	Z, r1
	/* Wait for data to be received */
	while (!(UCSRA & (1 << RXC)) )
    1962:	eb e2       	ldi	r30, 0x2B	; 43
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	88 23       	and	r24, r24
    196a:	dc f7       	brge	.-10     	; 0x1962 <USART_Receive+0x1a>
		;
	/****************Check if parity error is not ON********/
	if(((UCSRA >> PE)& 1) != 1)
    196c:	eb e2       	ldi	r30, 0x2B	; 43
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	86 95       	lsr	r24
    1974:	86 95       	lsr	r24
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	81 70       	andi	r24, 0x01	; 1
    197c:	90 70       	andi	r25, 0x00	; 0
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	19 f5       	brne	.+70     	; 0x19c8 <USART_Receive+0x80>
	{/***********if the data to be recieved is 9 bits, get the MSB first*****************/
	if (global_USART_Config.CHAR_SIZE  ==	USART_9_Bit_CHAR)
    1982:	80 91 ae 01 	lds	r24, 0x01AE
    1986:	8e 30       	cpi	r24, 0x0E	; 14
    1988:	71 f4       	brne	.+28     	; 0x19a6 <USART_Receive+0x5e>
	{
		*Ptr_To_Val = (((UCSRB >> 1)& 1) << 8) ;
    198a:	ea e2       	ldi	r30, 0x2A	; 42
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 81       	ld	r24, Z
    1990:	86 95       	lsr	r24
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	81 70       	andi	r24, 0x01	; 1
    1998:	90 70       	andi	r25, 0x00	; 0
    199a:	98 2f       	mov	r25, r24
    199c:	88 27       	eor	r24, r24
    199e:	ea 81       	ldd	r30, Y+2	; 0x02
    19a0:	fb 81       	ldd	r31, Y+3	; 0x03
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
	}

		/* Get and return received data from buffer */
		*Ptr_To_Val |= UDR;
    19a6:	ea 81       	ldd	r30, Y+2	; 0x02
    19a8:	fb 81       	ldd	r31, Y+3	; 0x03
    19aa:	20 81       	ld	r18, Z
    19ac:	31 81       	ldd	r19, Z+1	; 0x01
    19ae:	ec e2       	ldi	r30, 0x2C	; 44
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	88 2f       	mov	r24, r24
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	82 2b       	or	r24, r18
    19ba:	93 2b       	or	r25, r19
    19bc:	ea 81       	ldd	r30, Y+2	; 0x02
    19be:	fb 81       	ldd	r31, Y+3	; 0x03
    19c0:	91 83       	std	Z+1, r25	; 0x01
    19c2:	80 83       	st	Z, r24
		local_u8ParityError = 1; //no error
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_u8ParityError;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01

}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <USART_Rec_Int_Enable>:




 void USART_Rec_Int_Enable(void)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= 1<< RXCIE ;
    19de:	aa e2       	ldi	r26, 0x2A	; 42
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	ea e2       	ldi	r30, 0x2A	; 42
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	80 68       	ori	r24, 0x80	; 128
    19ea:	8c 93       	st	X, r24

}
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <USART_Rec_Int_Disable>:

 void USART_Rec_Int_Disable(void)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
	UCSRB &= ~(1<<RXCIE);
    19fa:	aa e2       	ldi	r26, 0x2A	; 42
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	ea e2       	ldi	r30, 0x2A	; 42
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	8f 77       	andi	r24, 0x7F	; 127
    1a06:	8c 93       	st	X, r24
}
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <USART_Trans_Int_Enable>:




 void USART_Trans_Int_Enable(void)
{
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= 1<< TXCIE ;
    1a16:	aa e2       	ldi	r26, 0x2A	; 42
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	ea e2       	ldi	r30, 0x2A	; 42
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 64       	ori	r24, 0x40	; 64
    1a22:	8c 93       	st	X, r24
}
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <USART_Trans_Int_Disable>:


 void USART_Trans_Int_Disable(void)
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	cd b7       	in	r28, 0x3d	; 61
    1a30:	de b7       	in	r29, 0x3e	; 62
	UCSRB &= ~ (1<<TXCIE);
    1a32:	aa e2       	ldi	r26, 0x2A	; 42
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	ea e2       	ldi	r30, 0x2A	; 42
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8f 7b       	andi	r24, 0xBF	; 191
    1a3e:	8c 93       	st	X, r24

}
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <USART_Rec_Enable>:




 void USART_Rec_Enable(void)
{
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= 1<< RXEN ;
    1a4e:	aa e2       	ldi	r26, 0x2A	; 42
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	ea e2       	ldi	r30, 0x2A	; 42
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 61       	ori	r24, 0x10	; 16
    1a5a:	8c 93       	st	X, r24

}
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <USART_Rec_Disable>:

 void USART_Rec_Disable(void)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
	UCSRB &=~(1<<RXEN);
    1a6a:	aa e2       	ldi	r26, 0x2A	; 42
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	ea e2       	ldi	r30, 0x2A	; 42
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	8f 7e       	andi	r24, 0xEF	; 239
    1a76:	8c 93       	st	X, r24

}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <USART_Trans_Enable>:




 void USART_Trans_Enable(void)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= 1<<TXEN;
    1a86:	aa e2       	ldi	r26, 0x2A	; 42
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	ea e2       	ldi	r30, 0x2A	; 42
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	88 60       	ori	r24, 0x08	; 8
    1a92:	8c 93       	st	X, r24
}
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <USART_Trans_Disable>:

 void USART_Trans_Disable(void)
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
	UCSRB &= ~ (1<<TXEN) ;
    1aa2:	aa e2       	ldi	r26, 0x2A	; 42
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	ea e2       	ldi	r30, 0x2A	; 42
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	87 7f       	andi	r24, 0xF7	; 247
    1aae:	8c 93       	st	X, r24
}
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <USART_callback_Rec_Int>:




 void USART_callback_Rec_Int(void (*Ptr_to_Func)(void))
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <USART_callback_Rec_Int+0x6>
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	9a 83       	std	Y+2, r25	; 0x02
    1ac2:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_Rec_Int = Ptr_to_Func;
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	90 93 a3 01 	sts	0x01A3, r25
    1acc:	80 93 a2 01 	sts	0x01A2, r24
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <USART_callback_Trans_Int>:
 void USART_callback_Trans_Int(void (*Ptr_to_Func)(void))
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <USART_callback_Trans_Int+0x6>
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_Trans_Int = Ptr_to_Func;
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	9a 81       	ldd	r25, Y+2	; 0x02
    1aec:	90 93 a1 01 	sts	0x01A1, r25
    1af0:	80 93 a0 01 	sts	0x01A0, r24
}
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <__vector_13>:


ISR(USART_RXC_vect)
{
    1afe:	1f 92       	push	r1
    1b00:	0f 92       	push	r0
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	0f 92       	push	r0
    1b06:	11 24       	eor	r1, r1
    1b08:	2f 93       	push	r18
    1b0a:	3f 93       	push	r19
    1b0c:	4f 93       	push	r20
    1b0e:	5f 93       	push	r21
    1b10:	6f 93       	push	r22
    1b12:	7f 93       	push	r23
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	af 93       	push	r26
    1b1a:	bf 93       	push	r27
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	(*Ptr_To_Rec_Int)();
    1b28:	e0 91 a2 01 	lds	r30, 0x01A2
    1b2c:	f0 91 a3 01 	lds	r31, 0x01A3
    1b30:	09 95       	icall
}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	ff 91       	pop	r31
    1b38:	ef 91       	pop	r30
    1b3a:	bf 91       	pop	r27
    1b3c:	af 91       	pop	r26
    1b3e:	9f 91       	pop	r25
    1b40:	8f 91       	pop	r24
    1b42:	7f 91       	pop	r23
    1b44:	6f 91       	pop	r22
    1b46:	5f 91       	pop	r21
    1b48:	4f 91       	pop	r20
    1b4a:	3f 91       	pop	r19
    1b4c:	2f 91       	pop	r18
    1b4e:	0f 90       	pop	r0
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	0f 90       	pop	r0
    1b54:	1f 90       	pop	r1
    1b56:	18 95       	reti

00001b58 <__vector_15>:

ISR(USART_TXC_vect)
{
    1b58:	1f 92       	push	r1
    1b5a:	0f 92       	push	r0
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	0f 92       	push	r0
    1b60:	11 24       	eor	r1, r1
    1b62:	2f 93       	push	r18
    1b64:	3f 93       	push	r19
    1b66:	4f 93       	push	r20
    1b68:	5f 93       	push	r21
    1b6a:	6f 93       	push	r22
    1b6c:	7f 93       	push	r23
    1b6e:	8f 93       	push	r24
    1b70:	9f 93       	push	r25
    1b72:	af 93       	push	r26
    1b74:	bf 93       	push	r27
    1b76:	ef 93       	push	r30
    1b78:	ff 93       	push	r31
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
	(*Ptr_To_Trans_Int)();
    1b82:	e0 91 a0 01 	lds	r30, 0x01A0
    1b86:	f0 91 a1 01 	lds	r31, 0x01A1
    1b8a:	09 95       	icall
}
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	ff 91       	pop	r31
    1b92:	ef 91       	pop	r30
    1b94:	bf 91       	pop	r27
    1b96:	af 91       	pop	r26
    1b98:	9f 91       	pop	r25
    1b9a:	8f 91       	pop	r24
    1b9c:	7f 91       	pop	r23
    1b9e:	6f 91       	pop	r22
    1ba0:	5f 91       	pop	r21
    1ba2:	4f 91       	pop	r20
    1ba4:	3f 91       	pop	r19
    1ba6:	2f 91       	pop	r18
    1ba8:	0f 90       	pop	r0
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	0f 90       	pop	r0
    1bae:	1f 90       	pop	r1
    1bb0:	18 95       	reti

00001bb2 <TMR0_Init>:
static void (*Ptr_To_OVFI)(void);
static void (*Ptr_To_OCMI)(void);


extern void TMR0_Init(struct STimer0_Settings Configuration)
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <TMR0_Init+0x6>
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <TMR0_Init+0x8>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	69 83       	std	Y+1, r22	; 0x01
    1bc0:	7a 83       	std	Y+2, r23	; 0x02
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
	Timer0_Configuration = Configuration ;
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	ab 81       	ldd	r26, Y+3	; 0x03
    1bcc:	bc 81       	ldd	r27, Y+4	; 0x04
    1bce:	80 93 b3 01 	sts	0x01B3, r24
    1bd2:	90 93 b4 01 	sts	0x01B4, r25
    1bd6:	a0 93 b5 01 	sts	0x01B5, r26
    1bda:	b0 93 b6 01 	sts	0x01B6, r27

	/*********************Adjust Mode***********************/
	if (Timer0_Configuration.Timer0_Mode == NORMAL )
    1bde:	80 91 b5 01 	lds	r24, 0x01B5
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	71 f4       	brne	.+28     	; 0x1c02 <TMR0_Init+0x50>
	{
		TCCR0 &= ~(1<<WGM00);
    1be6:	a3 e5       	ldi	r26, 0x53	; 83
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e3 e5       	ldi	r30, 0x53	; 83
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8f 7b       	andi	r24, 0xBF	; 191
    1bf2:	8c 93       	st	X, r24
		TCCR0 &= ~( 1<< WGM01);
    1bf4:	a3 e5       	ldi	r26, 0x53	; 83
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e3 e5       	ldi	r30, 0x53	; 83
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	87 7f       	andi	r24, 0xF7	; 247
    1c00:	8c 93       	st	X, r24
	}

	if (Timer0_Configuration.Timer0_Mode == CTC )
    1c02:	80 91 b5 01 	lds	r24, 0x01B5
    1c06:	88 23       	and	r24, r24
    1c08:	71 f4       	brne	.+28     	; 0x1c26 <TMR0_Init+0x74>
	{
		TCCR0 &= ~(1<<WGM00);
    1c0a:	a3 e5       	ldi	r26, 0x53	; 83
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e3 e5       	ldi	r30, 0x53	; 83
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	8f 7b       	andi	r24, 0xBF	; 191
    1c16:	8c 93       	st	X, r24
		TCCR0 |= ( 1<< WGM01);
    1c18:	a3 e5       	ldi	r26, 0x53	; 83
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e3 e5       	ldi	r30, 0x53	; 83
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	88 60       	ori	r24, 0x08	; 8
    1c24:	8c 93       	st	X, r24
	}

	/************************Adjust prescalar************************/
	TCCR0 = TCCR0 | Timer0_Configuration.Timer0_PRESCALAR;
    1c26:	a3 e5       	ldi	r26, 0x53	; 83
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e3 e5       	ldi	r30, 0x53	; 83
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	90 81       	ld	r25, Z
    1c30:	80 91 b6 01 	lds	r24, 0x01B6
    1c34:	89 2b       	or	r24, r25
    1c36:	8c 93       	st	X, r24

	/**************************TMR0 Enable/Disable********************/
	if (Timer0_Configuration.Timer0_OVFI == TOIE0_enable )
    1c38:	80 91 b3 01 	lds	r24, 0x01B3
    1c3c:	88 23       	and	r24, r24
    1c3e:	41 f4       	brne	.+16     	; 0x1c50 <TMR0_Init+0x9e>
	{
		TIMSK |= 1<< TOIE0 ;
    1c40:	a9 e5       	ldi	r26, 0x59	; 89
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e9 e5       	ldi	r30, 0x59	; 89
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	81 60       	ori	r24, 0x01	; 1
    1c4c:	8c 93       	st	X, r24
    1c4e:	0b c0       	rjmp	.+22     	; 0x1c66 <TMR0_Init+0xb4>
	}
	else if (Timer0_Configuration.Timer0_OVFI == TOIE0_disable)
    1c50:	80 91 b3 01 	lds	r24, 0x01B3
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	39 f4       	brne	.+14     	; 0x1c66 <TMR0_Init+0xb4>
	{
		TIMSK &= ~(1<< TOIE0) ;
    1c58:	a9 e5       	ldi	r26, 0x59	; 89
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e9 e5       	ldi	r30, 0x59	; 89
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8e 7f       	andi	r24, 0xFE	; 254
    1c64:	8c 93       	st	X, r24

	}

	/**************************OCR0 Enable/Disable********************/
	if (Timer0_Configuration.Timer0_OCIE == OCIE0_enable )
    1c66:	80 91 b4 01 	lds	r24, 0x01B4
    1c6a:	88 23       	and	r24, r24
    1c6c:	41 f4       	brne	.+16     	; 0x1c7e <TMR0_Init+0xcc>
	{
		TIMSK |= 1<< OCIE0 ;
    1c6e:	a9 e5       	ldi	r26, 0x59	; 89
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e9 e5       	ldi	r30, 0x59	; 89
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	82 60       	ori	r24, 0x02	; 2
    1c7a:	8c 93       	st	X, r24
    1c7c:	0b c0       	rjmp	.+22     	; 0x1c94 <TMR0_Init+0xe2>
	}
	else if (Timer0_Configuration.Timer0_OCIE == OCIE0_disable)
    1c7e:	80 91 b4 01 	lds	r24, 0x01B4
    1c82:	81 30       	cpi	r24, 0x01	; 1
    1c84:	39 f4       	brne	.+14     	; 0x1c94 <TMR0_Init+0xe2>
	{
		TIMSK &= ~(1<< OCIE0) ;
    1c86:	a9 e5       	ldi	r26, 0x59	; 89
    1c88:	b0 e0       	ldi	r27, 0x00	; 0
    1c8a:	e9 e5       	ldi	r30, 0x59	; 89
    1c8c:	f0 e0       	ldi	r31, 0x00	; 0
    1c8e:	80 81       	ld	r24, Z
    1c90:	8d 7f       	andi	r24, 0xFD	; 253
    1c92:	8c 93       	st	X, r24

	}

}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <TMR0_ReadCounterValue>:

extern void TMR0_ReadCounterValue(u8 *u8NumOfTicks)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	00 d0       	rcall	.+0      	; 0x1ca8 <TMR0_ReadCounterValue+0x6>
    1ca8:	cd b7       	in	r28, 0x3d	; 61
    1caa:	de b7       	in	r29, 0x3e	; 62
    1cac:	9a 83       	std	Y+2, r25	; 0x02
    1cae:	89 83       	std	Y+1, r24	; 0x01
	*u8NumOfTicks = TCNT0;
    1cb0:	e2 e5       	ldi	r30, 0x52	; 82
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cba:	80 83       	st	Z, r24
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <TMR0_Set_Compare_Value>:
extern void TMR0_Set_Compare_Value(u8 u8Val)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	0f 92       	push	r0
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = u8Val;
    1cd2:	ec e5       	ldi	r30, 0x5C	; 92
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	89 81       	ldd	r24, Y+1	; 0x01
    1cd8:	80 83       	st	Z, r24
}
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <TMR0_Set_Counter_Value>:

extern void TMR0_Set_Counter_Value(u8 u8Val)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	0f 92       	push	r0
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = u8Val;
    1cee:	e2 e5       	ldi	r30, 0x52	; 82
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	80 83       	st	Z, r24

}
    1cf6:	0f 90       	pop	r0
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <TMR0_Set_TOV_Number>:


//used for set the Number of OverFlow (Used for SW Counters)

extern void TMR0_Set_TOV_Number(u8 u8Val)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	0f 92       	push	r0
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	89 83       	std	Y+1, r24	; 0x01
	TOV_Number = u8Val;
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	80 93 b7 01 	sts	0x01B7, r24

}
    1d10:	0f 90       	pop	r0
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <TMR0_Get_TOV_Number>:
extern void TMR0_Get_TOV_Number(u8 *u8Val)
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <TMR0_Get_TOV_Number+0x6>
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
	*u8Val = TOV_Number ;
    1d26:	80 91 b7 01 	lds	r24, 0x01B7
    1d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2e:	80 83       	st	Z, r24
}
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <TMR0_Get_Ticks_of_SWcounter>:


extern void TMR0_Get_Ticks_of_SWcounter (u32 *u8Val)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	00 d0       	rcall	.+0      	; 0x1d40 <TMR0_Get_Ticks_of_SWcounter+0x6>
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
	*u8Val =  256*TOV_Number + TCNT0;
    1d48:	80 91 b7 01 	lds	r24, 0x01B7
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	38 2f       	mov	r19, r24
    1d52:	22 27       	eor	r18, r18
    1d54:	e2 e5       	ldi	r30, 0x52	; 82
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	82 0f       	add	r24, r18
    1d60:	93 1f       	adc	r25, r19
    1d62:	aa 27       	eor	r26, r26
    1d64:	97 fd       	sbrc	r25, 7
    1d66:	a0 95       	com	r26
    1d68:	ba 2f       	mov	r27, r26
    1d6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6e:	80 83       	st	Z, r24
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	a2 83       	std	Z+2, r26	; 0x02
    1d74:	b3 83       	std	Z+3, r27	; 0x03
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <callback_TMR0_Overflow_Interrupt>:



extern void callback_TMR0_Overflow_Interrupt (void(*Ptr_to_OVI_Function)(void))
{
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <callback_TMR0_Overflow_Interrupt+0x6>
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
    1d8a:	9a 83       	std	Y+2, r25	; 0x02
    1d8c:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_OVFI = Ptr_to_OVI_Function ;
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	90 93 a5 01 	sts	0x01A5, r25
    1d96:	80 93 a4 01 	sts	0x01A4, r24

}
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <callback_OCR0_Compare_Match_Interrupt>:
extern void callback_OCR0_Compare_Match_Interrupt(void(*Ptr_to_OCM_Function)(void))
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <callback_OCR0_Compare_Match_Interrupt+0x6>
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	9a 83       	std	Y+2, r25	; 0x02
    1db0:	89 83       	std	Y+1, r24	; 0x01
	Ptr_To_OCMI = Ptr_to_OCM_Function ;
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	90 93 a7 01 	sts	0x01A7, r25
    1dba:	80 93 a6 01 	sts	0x01A6, r24
}
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	cf 91       	pop	r28
    1dc4:	df 91       	pop	r29
    1dc6:	08 95       	ret

00001dc8 <__vector_10>:



ISR(__vector_10)
{
    1dc8:	1f 92       	push	r1
    1dca:	0f 92       	push	r0
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	0f 92       	push	r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	(*Ptr_To_OCMI)();
    1df2:	e0 91 a6 01 	lds	r30, 0x01A6
    1df6:	f0 91 a7 01 	lds	r31, 0x01A7
    1dfa:	09 95       	icall
}
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	ff 91       	pop	r31
    1e02:	ef 91       	pop	r30
    1e04:	bf 91       	pop	r27
    1e06:	af 91       	pop	r26
    1e08:	9f 91       	pop	r25
    1e0a:	8f 91       	pop	r24
    1e0c:	7f 91       	pop	r23
    1e0e:	6f 91       	pop	r22
    1e10:	5f 91       	pop	r21
    1e12:	4f 91       	pop	r20
    1e14:	3f 91       	pop	r19
    1e16:	2f 91       	pop	r18
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	0f 90       	pop	r0
    1e1e:	1f 90       	pop	r1
    1e20:	18 95       	reti

00001e22 <__vector_11>:
ISR(__vector_11)
{
    1e22:	1f 92       	push	r1
    1e24:	0f 92       	push	r0
    1e26:	0f b6       	in	r0, 0x3f	; 63
    1e28:	0f 92       	push	r0
    1e2a:	11 24       	eor	r1, r1
    1e2c:	2f 93       	push	r18
    1e2e:	3f 93       	push	r19
    1e30:	4f 93       	push	r20
    1e32:	5f 93       	push	r21
    1e34:	6f 93       	push	r22
    1e36:	7f 93       	push	r23
    1e38:	8f 93       	push	r24
    1e3a:	9f 93       	push	r25
    1e3c:	af 93       	push	r26
    1e3e:	bf 93       	push	r27
    1e40:	ef 93       	push	r30
    1e42:	ff 93       	push	r31
    1e44:	df 93       	push	r29
    1e46:	cf 93       	push	r28
    1e48:	cd b7       	in	r28, 0x3d	; 61
    1e4a:	de b7       	in	r29, 0x3e	; 62
	TOV_Number++;
    1e4c:	80 91 b7 01 	lds	r24, 0x01B7
    1e50:	8f 5f       	subi	r24, 0xFF	; 255
    1e52:	80 93 b7 01 	sts	0x01B7, r24
	(*Ptr_To_OVFI)();
    1e56:	e0 91 a4 01 	lds	r30, 0x01A4
    1e5a:	f0 91 a5 01 	lds	r31, 0x01A5
    1e5e:	09 95       	icall
}
    1e60:	cf 91       	pop	r28
    1e62:	df 91       	pop	r29
    1e64:	ff 91       	pop	r31
    1e66:	ef 91       	pop	r30
    1e68:	bf 91       	pop	r27
    1e6a:	af 91       	pop	r26
    1e6c:	9f 91       	pop	r25
    1e6e:	8f 91       	pop	r24
    1e70:	7f 91       	pop	r23
    1e72:	6f 91       	pop	r22
    1e74:	5f 91       	pop	r21
    1e76:	4f 91       	pop	r20
    1e78:	3f 91       	pop	r19
    1e7a:	2f 91       	pop	r18
    1e7c:	0f 90       	pop	r0
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	0f 90       	pop	r0
    1e82:	1f 90       	pop	r1
    1e84:	18 95       	reti

00001e86 <SPI_voidInit>:
struct S_SPI_Configuration gConfig ;

static void (*SPI_ISR)(void);

void SPI_voidInit(struct S_SPI_Configuration spi_Config )
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	2d 97       	sbiw	r28, 0x0d	; 13
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	29 83       	std	Y+1, r18	; 0x01
    1e9c:	3a 83       	std	Y+2, r19	; 0x02
    1e9e:	4b 83       	std	Y+3, r20	; 0x03
    1ea0:	5c 83       	std	Y+4, r21	; 0x04
    1ea2:	6d 83       	std	Y+5, r22	; 0x05
    1ea4:	7e 83       	std	Y+6, r23	; 0x06
    1ea6:	8f 83       	std	Y+7, r24	; 0x07
    1ea8:	98 87       	std	Y+8, r25	; 0x08

	gConfig = spi_Config ;
    1eaa:	88 eb       	ldi	r24, 0xB8	; 184
    1eac:	91 e0       	ldi	r25, 0x01	; 1
    1eae:	9a 87       	std	Y+10, r25	; 0x0a
    1eb0:	89 87       	std	Y+9, r24	; 0x09
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	31 96       	adiw	r30, 0x01	; 1
    1eb6:	fc 87       	std	Y+12, r31	; 0x0c
    1eb8:	eb 87       	std	Y+11, r30	; 0x0b
    1eba:	f8 e0       	ldi	r31, 0x08	; 8
    1ebc:	fd 87       	std	Y+13, r31	; 0x0d
    1ebe:	eb 85       	ldd	r30, Y+11	; 0x0b
    1ec0:	fc 85       	ldd	r31, Y+12	; 0x0c
    1ec2:	00 80       	ld	r0, Z
    1ec4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ec6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ec8:	01 96       	adiw	r24, 0x01	; 1
    1eca:	9c 87       	std	Y+12, r25	; 0x0c
    1ecc:	8b 87       	std	Y+11, r24	; 0x0b
    1ece:	e9 85       	ldd	r30, Y+9	; 0x09
    1ed0:	fa 85       	ldd	r31, Y+10	; 0x0a
    1ed2:	00 82       	st	Z, r0
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	01 96       	adiw	r24, 0x01	; 1
    1eda:	9a 87       	std	Y+10, r25	; 0x0a
    1edc:	89 87       	std	Y+9, r24	; 0x09
    1ede:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ee0:	91 50       	subi	r25, 0x01	; 1
    1ee2:	9d 87       	std	Y+13, r25	; 0x0d
    1ee4:	ed 85       	ldd	r30, Y+13	; 0x0d
    1ee6:	ee 23       	and	r30, r30
    1ee8:	51 f7       	brne	.-44     	; 0x1ebe <SPI_voidInit+0x38>
		/********************Enable SPI Interrupt ******************/
	//SPCR = SPCR | (SPI_INT_ENABLE<<SPIE);
	//SPCR = SPCR |  (SPI_INT_ENABLE<<SPIE) | (SPI_ENABLE<<SPE) | (SPI_DATA_ORDER<<DORD) | (SLAVE_MODE<<MSTR) | (SPI_OPERATING_LEVEL<<CPOL) | (SPI_SAMPLING_EDGE<<CPHA) | (SPI_PRESCALAR);


	if (gConfig.INT_ENABLE == SPI_INT_ON)
    1eea:	80 91 be 01 	lds	r24, 0x01BE
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	41 f4       	brne	.+16     	; 0x1f02 <SPI_voidInit+0x7c>
		SetBit(SPCR,SPIE);
    1ef2:	ad e2       	ldi	r26, 0x2D	; 45
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	ed e2       	ldi	r30, 0x2D	; 45
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	80 68       	ori	r24, 0x80	; 128
    1efe:	8c 93       	st	X, r24
    1f00:	0b c0       	rjmp	.+22     	; 0x1f18 <SPI_voidInit+0x92>
	else if (gConfig.INT_ENABLE == SPI_INT_OFF)
    1f02:	80 91 be 01 	lds	r24, 0x01BE
    1f06:	88 23       	and	r24, r24
    1f08:	39 f4       	brne	.+14     	; 0x1f18 <SPI_voidInit+0x92>
		ClrBit(SPCR,SPIE);
    1f0a:	ad e2       	ldi	r26, 0x2D	; 45
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	ed e2       	ldi	r30, 0x2D	; 45
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	8f 77       	andi	r24, 0x7F	; 127
    1f16:	8c 93       	st	X, r24

	/*******************Data Order ******************/

	if (gConfig.DATA_ORDER == SPI_LSB_FISRT)
    1f18:	80 91 bf 01 	lds	r24, 0x01BF
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	41 f4       	brne	.+16     	; 0x1f30 <SPI_voidInit+0xaa>
		SetBit(SPCR,DORD);
    1f20:	ad e2       	ldi	r26, 0x2D	; 45
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	ed e2       	ldi	r30, 0x2D	; 45
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	80 62       	ori	r24, 0x20	; 32
    1f2c:	8c 93       	st	X, r24
    1f2e:	0b c0       	rjmp	.+22     	; 0x1f46 <SPI_voidInit+0xc0>
	else if (gConfig.DATA_ORDER == SPI_MSB_FISRT)
    1f30:	80 91 bf 01 	lds	r24, 0x01BF
    1f34:	88 23       	and	r24, r24
    1f36:	39 f4       	brne	.+14     	; 0x1f46 <SPI_voidInit+0xc0>
		ClrBit(SPCR,DORD);
    1f38:	ad e2       	ldi	r26, 0x2D	; 45
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	ed e2       	ldi	r30, 0x2D	; 45
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8f 7d       	andi	r24, 0xDF	; 223
    1f44:	8c 93       	st	X, r24

	/********************Master Slave Select ******************/

	if (gConfig.SLAVE_MODE == SPI_MASTER)
    1f46:	80 91 b8 01 	lds	r24, 0x01B8
    1f4a:	81 30       	cpi	r24, 0x01	; 1
    1f4c:	41 f4       	brne	.+16     	; 0x1f5e <SPI_voidInit+0xd8>
		SetBit(SPCR,MSTR);
    1f4e:	ad e2       	ldi	r26, 0x2D	; 45
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	ed e2       	ldi	r30, 0x2D	; 45
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	80 61       	ori	r24, 0x10	; 16
    1f5a:	8c 93       	st	X, r24
    1f5c:	0b c0       	rjmp	.+22     	; 0x1f74 <SPI_voidInit+0xee>
	else if (gConfig.SLAVE_MODE == SPI_SLAVE)
    1f5e:	80 91 b8 01 	lds	r24, 0x01B8
    1f62:	88 23       	and	r24, r24
    1f64:	39 f4       	brne	.+14     	; 0x1f74 <SPI_voidInit+0xee>
		ClrBit(SPCR,MSTR);
    1f66:	ad e2       	ldi	r26, 0x2D	; 45
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	ed e2       	ldi	r30, 0x2D	; 45
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	8f 7e       	andi	r24, 0xEF	; 239
    1f72:	8c 93       	st	X, r24

	/********************clock polarity******************/
	if (gConfig.OPERATING_LEVEL == SPI_IDLE_LOW)
    1f74:	80 91 bc 01 	lds	r24, 0x01BC
    1f78:	88 23       	and	r24, r24
    1f7a:	41 f4       	brne	.+16     	; 0x1f8c <SPI_voidInit+0x106>
		SetBit(SPCR,CPOL);
    1f7c:	ad e2       	ldi	r26, 0x2D	; 45
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	ed e2       	ldi	r30, 0x2D	; 45
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	88 60       	ori	r24, 0x08	; 8
    1f88:	8c 93       	st	X, r24
    1f8a:	0b c0       	rjmp	.+22     	; 0x1fa2 <SPI_voidInit+0x11c>
	else if (gConfig.OPERATING_LEVEL == SPI_IDLE_HIGH)
    1f8c:	80 91 bc 01 	lds	r24, 0x01BC
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	39 f4       	brne	.+14     	; 0x1fa2 <SPI_voidInit+0x11c>
		ClrBit(SPCR,CPOL);
    1f94:	ad e2       	ldi	r26, 0x2D	; 45
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	ed e2       	ldi	r30, 0x2D	; 45
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	87 7f       	andi	r24, 0xF7	; 247
    1fa0:	8c 93       	st	X, r24

	/********************clock phase******************/
	if (gConfig.SAMPLING_EDGE == SPI_RISING)
    1fa2:	80 91 bd 01 	lds	r24, 0x01BD
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	41 f4       	brne	.+16     	; 0x1fba <SPI_voidInit+0x134>
		SetBit(SPCR,CPHA);
    1faa:	ad e2       	ldi	r26, 0x2D	; 45
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	ed e2       	ldi	r30, 0x2D	; 45
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	84 60       	ori	r24, 0x04	; 4
    1fb6:	8c 93       	st	X, r24
    1fb8:	0b c0       	rjmp	.+22     	; 0x1fd0 <SPI_voidInit+0x14a>
	else if (gConfig.SAMPLING_EDGE == SPI_FALLING)
    1fba:	80 91 bd 01 	lds	r24, 0x01BD
    1fbe:	88 23       	and	r24, r24
    1fc0:	39 f4       	brne	.+14     	; 0x1fd0 <SPI_voidInit+0x14a>
		ClrBit(SPCR,CPHA);
    1fc2:	ad e2       	ldi	r26, 0x2D	; 45
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	ed e2       	ldi	r30, 0x2D	; 45
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8b 7f       	andi	r24, 0xFB	; 251
    1fce:	8c 93       	st	X, r24

	/********************SPI pre-scalar in case of master ******************/
		SPCR = SPCR | (gConfig.PRESCALAR);
    1fd0:	ad e2       	ldi	r26, 0x2D	; 45
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	ed e2       	ldi	r30, 0x2D	; 45
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	90 81       	ld	r25, Z
    1fda:	80 91 b9 01 	lds	r24, 0x01B9
    1fde:	89 2b       	or	r24, r25
    1fe0:	8c 93       	st	X, r24
	/********************Double SPI speed if master******************/

		if (gConfig.DOUBLE_SPEED == SPI_DOUBLE_SPEED_MODE_ON)
    1fe2:	80 91 bb 01 	lds	r24, 0x01BB
    1fe6:	81 30       	cpi	r24, 0x01	; 1
    1fe8:	41 f4       	brne	.+16     	; 0x1ffa <SPI_voidInit+0x174>
			SetBit(SPSR,SPI2X);
    1fea:	ae e2       	ldi	r26, 0x2E	; 46
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ee e2       	ldi	r30, 0x2E	; 46
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	81 60       	ori	r24, 0x01	; 1
    1ff6:	8c 93       	st	X, r24
    1ff8:	0b c0       	rjmp	.+22     	; 0x2010 <SPI_voidInit+0x18a>
		else if (gConfig.DOUBLE_SPEED == SPI_DOUBLE_SPEED_MODE_OFF)
    1ffa:	80 91 bb 01 	lds	r24, 0x01BB
    1ffe:	88 23       	and	r24, r24
    2000:	39 f4       	brne	.+14     	; 0x2010 <SPI_voidInit+0x18a>
			ClrBit(SPSR,SPI2X);
    2002:	ae e2       	ldi	r26, 0x2E	; 46
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	ee e2       	ldi	r30, 0x2E	; 46
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	8e 7f       	andi	r24, 0xFE	; 254
    200e:	8c 93       	st	X, r24

	/********************Enable SPI ******************/
		if (gConfig.ENABLE == SPI_ENABLE_ON)
    2010:	80 91 ba 01 	lds	r24, 0x01BA
    2014:	81 30       	cpi	r24, 0x01	; 1
    2016:	41 f4       	brne	.+16     	; 0x2028 <SPI_voidInit+0x1a2>
			SetBit(SPCR,SPE);
    2018:	ad e2       	ldi	r26, 0x2D	; 45
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	ed e2       	ldi	r30, 0x2D	; 45
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 64       	ori	r24, 0x40	; 64
    2024:	8c 93       	st	X, r24
    2026:	0b c0       	rjmp	.+22     	; 0x203e <SPI_voidInit+0x1b8>
			else if (gConfig.ENABLE == SPI_ENABLE_OFF)
    2028:	80 91 ba 01 	lds	r24, 0x01BA
    202c:	88 23       	and	r24, r24
    202e:	39 f4       	brne	.+14     	; 0x203e <SPI_voidInit+0x1b8>
				ClrBit(SPCR,SPE);
    2030:	ad e2       	ldi	r26, 0x2D	; 45
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ed e2       	ldi	r30, 0x2D	; 45
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8f 7b       	andi	r24, 0xBF	; 191
    203c:	8c 93       	st	X, r24

}
    203e:	2d 96       	adiw	r28, 0x0d	; 13
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <SPI_Send_And_receive>:



u8  SPI_Send_And_receive(u8 Copy_u8Data)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	0f 92       	push	r0
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
    205a:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data; //send data
    205c:	ef e2       	ldi	r30, 0x2F	; 47
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	89 81       	ldd	r24, Y+1	; 0x01
    2062:	80 83       	st	Z, r24
	while(!(SPSR & (1<<SPIF)));
    2064:	ee e2       	ldi	r30, 0x2E	; 46
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	88 23       	and	r24, r24
    206c:	dc f7       	brge	.-10     	; 0x2064 <SPI_Send_And_receive+0x14>
	return SPDR ; // Received data
    206e:	ef e2       	ldi	r30, 0x2F	; 47
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	80 81       	ld	r24, Z

}
    2074:	0f 90       	pop	r0
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <SPI_Checks_for_collision>:

 u8 SPI_Checks_for_collision(void)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8CollStatus = GetBit(SPSR,WCOL);
    2086:	ee e2       	ldi	r30, 0x2E	; 46
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	82 95       	swap	r24
    208e:	86 95       	lsr	r24
    2090:	86 95       	lsr	r24
    2092:	83 70       	andi	r24, 0x03	; 3
    2094:	81 70       	andi	r24, 0x01	; 1
    2096:	89 83       	std	Y+1, r24	; 0x01
	return local_u8CollStatus;
    2098:	89 81       	ldd	r24, Y+1	; 0x01
}
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <SPI_callBackFunc_Assign>:


  void SPI_callBackFunc_Assign(void (*PtrToSPI_Isr) (void))
 {
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <SPI_callBackFunc_Assign+0x6>
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	9a 83       	std	Y+2, r25	; 0x02
    20ae:	89 83       	std	Y+1, r24	; 0x01
 	SPI_ISR = PtrToSPI_Isr;
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	90 93 a9 01 	sts	0x01A9, r25
    20b8:	80 93 a8 01 	sts	0x01A8, r24
 }
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <__vector_12>:


  ISR(SPI_STC_vect)
  {
    20c6:	1f 92       	push	r1
    20c8:	0f 92       	push	r0
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	0f 92       	push	r0
    20ce:	11 24       	eor	r1, r1
    20d0:	2f 93       	push	r18
    20d2:	3f 93       	push	r19
    20d4:	4f 93       	push	r20
    20d6:	5f 93       	push	r21
    20d8:	6f 93       	push	r22
    20da:	7f 93       	push	r23
    20dc:	8f 93       	push	r24
    20de:	9f 93       	push	r25
    20e0:	af 93       	push	r26
    20e2:	bf 93       	push	r27
    20e4:	ef 93       	push	r30
    20e6:	ff 93       	push	r31
    20e8:	df 93       	push	r29
    20ea:	cf 93       	push	r28
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
  	SPI_ISR();
    20f0:	e0 91 a8 01 	lds	r30, 0x01A8
    20f4:	f0 91 a9 01 	lds	r31, 0x01A9
    20f8:	09 95       	icall
  }
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	ff 91       	pop	r31
    2100:	ef 91       	pop	r30
    2102:	bf 91       	pop	r27
    2104:	af 91       	pop	r26
    2106:	9f 91       	pop	r25
    2108:	8f 91       	pop	r24
    210a:	7f 91       	pop	r23
    210c:	6f 91       	pop	r22
    210e:	5f 91       	pop	r21
    2110:	4f 91       	pop	r20
    2112:	3f 91       	pop	r19
    2114:	2f 91       	pop	r18
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	0f 90       	pop	r0
    211c:	1f 90       	pop	r1
    211e:	18 95       	reti

00002120 <get_port_index>:
 volatile unsigned char*  GPIO_ports[] = {myPORTA,myPORTB,myPORTC,myPORTD};
 volatile unsigned char*  GPIO_dirs[] = {myDDRA,myDDRB,myDDRC,myDDRD};
 volatile unsigned char*  GPIO_pins[] = {myPINA,myPINB,myPINC,myPIND};

u8 get_port_index (u8 port_name)
{
    2120:	df 93       	push	r29
    2122:	cf 93       	push	r28
    2124:	00 d0       	rcall	.+0      	; 0x2126 <get_port_index+0x6>
    2126:	00 d0       	rcall	.+0      	; 0x2128 <get_port_index+0x8>
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i ;
	switch (port_name)
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	3c 83       	std	Y+4, r19	; 0x04
    2136:	2b 83       	std	Y+3, r18	; 0x03
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	84 34       	cpi	r24, 0x44	; 68
    213e:	91 05       	cpc	r25, r1
    2140:	c1 f1       	breq	.+112    	; 0x21b2 <get_port_index+0x92>
    2142:	2b 81       	ldd	r18, Y+3	; 0x03
    2144:	3c 81       	ldd	r19, Y+4	; 0x04
    2146:	25 34       	cpi	r18, 0x45	; 69
    2148:	31 05       	cpc	r19, r1
    214a:	84 f4       	brge	.+32     	; 0x216c <get_port_index+0x4c>
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	82 34       	cpi	r24, 0x42	; 66
    2152:	91 05       	cpc	r25, r1
    2154:	41 f1       	breq	.+80     	; 0x21a6 <get_port_index+0x86>
    2156:	2b 81       	ldd	r18, Y+3	; 0x03
    2158:	3c 81       	ldd	r19, Y+4	; 0x04
    215a:	23 34       	cpi	r18, 0x43	; 67
    215c:	31 05       	cpc	r19, r1
    215e:	34 f5       	brge	.+76     	; 0x21ac <get_port_index+0x8c>
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	81 34       	cpi	r24, 0x41	; 65
    2166:	91 05       	cpc	r25, r1
    2168:	e1 f0       	breq	.+56     	; 0x21a2 <get_port_index+0x82>
    216a:	25 c0       	rjmp	.+74     	; 0x21b6 <get_port_index+0x96>
    216c:	2b 81       	ldd	r18, Y+3	; 0x03
    216e:	3c 81       	ldd	r19, Y+4	; 0x04
    2170:	22 36       	cpi	r18, 0x62	; 98
    2172:	31 05       	cpc	r19, r1
    2174:	c1 f0       	breq	.+48     	; 0x21a6 <get_port_index+0x86>
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	83 36       	cpi	r24, 0x63	; 99
    217c:	91 05       	cpc	r25, r1
    217e:	34 f4       	brge	.+12     	; 0x218c <get_port_index+0x6c>
    2180:	2b 81       	ldd	r18, Y+3	; 0x03
    2182:	3c 81       	ldd	r19, Y+4	; 0x04
    2184:	21 36       	cpi	r18, 0x61	; 97
    2186:	31 05       	cpc	r19, r1
    2188:	61 f0       	breq	.+24     	; 0x21a2 <get_port_index+0x82>
    218a:	15 c0       	rjmp	.+42     	; 0x21b6 <get_port_index+0x96>
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	9c 81       	ldd	r25, Y+4	; 0x04
    2190:	83 36       	cpi	r24, 0x63	; 99
    2192:	91 05       	cpc	r25, r1
    2194:	59 f0       	breq	.+22     	; 0x21ac <get_port_index+0x8c>
    2196:	2b 81       	ldd	r18, Y+3	; 0x03
    2198:	3c 81       	ldd	r19, Y+4	; 0x04
    219a:	24 36       	cpi	r18, 0x64	; 100
    219c:	31 05       	cpc	r19, r1
    219e:	49 f0       	breq	.+18     	; 0x21b2 <get_port_index+0x92>
    21a0:	0a c0       	rjmp	.+20     	; 0x21b6 <get_port_index+0x96>
	{
	case 'A':
	case 'a':
		i = 0 ;
    21a2:	19 82       	std	Y+1, r1	; 0x01
    21a4:	08 c0       	rjmp	.+16     	; 0x21b6 <get_port_index+0x96>
		break;
	case 'B' :
	case 'b':
		i = 1 ;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	89 83       	std	Y+1, r24	; 0x01
    21aa:	05 c0       	rjmp	.+10     	; 0x21b6 <get_port_index+0x96>
		break;
	case 'C':
	case 'c':
		i = 2 ;
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	89 83       	std	Y+1, r24	; 0x01
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <get_port_index+0x96>
		break;
	case 'D':
	case 'd':

		i = 3 ;
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
return i ;
    21b6:	89 81       	ldd	r24, Y+1	; 0x01

}
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	0f 90       	pop	r0
    21c0:	cf 91       	pop	r28
    21c2:	df 91       	pop	r29
    21c4:	08 95       	ret

000021c6 <GPIO_voidInit>:



 void GPIO_voidInit(void)
{
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
	/*Comment!: DDR initialization  */
	*GPIO_dirs[0] = Init_direction_default;
    21ce:	e0 91 90 01 	lds	r30, 0x0190
    21d2:	f0 91 91 01 	lds	r31, 0x0191
    21d6:	10 82       	st	Z, r1
	*GPIO_dirs[1] = Init_direction_default;
    21d8:	e0 91 92 01 	lds	r30, 0x0192
    21dc:	f0 91 93 01 	lds	r31, 0x0193
    21e0:	10 82       	st	Z, r1
	*GPIO_dirs[2] = Init_direction_default;
    21e2:	e0 91 94 01 	lds	r30, 0x0194
    21e6:	f0 91 95 01 	lds	r31, 0x0195
    21ea:	10 82       	st	Z, r1
	*GPIO_dirs[3] = Init_direction_default;
    21ec:	e0 91 96 01 	lds	r30, 0x0196
    21f0:	f0 91 97 01 	lds	r31, 0x0197
    21f4:	10 82       	st	Z, r1

}
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <GPIO_u8_ReadPinVal>:

//===================PIN==========================
//Data
/*Comment!: Read Pin Value */
u8 GPIO_u8_ReadPinVal(u8 PinIdx,u8* PtrToVal, u8 Port_Name)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <GPIO_u8_ReadPinVal+0x6>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <GPIO_u8_ReadPinVal+0x8>
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	8a 83       	std	Y+2, r24	; 0x02
    220c:	7c 83       	std	Y+4, r23	; 0x04
    220e:	6b 83       	std	Y+3, r22	; 0x03
    2210:	4d 83       	std	Y+5, r20	; 0x05
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
    2212:	8a 81       	ldd	r24, Y+2	; 0x02
    2214:	88 30       	cpi	r24, 0x08	; 8
    2216:	10 f0       	brcs	.+4      	; 0x221c <GPIO_u8_ReadPinVal+0x20>
	{
		API_Status = error_happen;
    2218:	19 82       	std	Y+1, r1	; 0x01
    221a:	20 c0       	rjmp	.+64     	; 0x225c <GPIO_u8_ReadPinVal+0x60>
	}
	else
	{

		*PtrToVal =  ((*GPIO_pins [ get_port_index(Port_Name) ] >>PinIdx)&1) ;
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
    221e:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    2222:	88 2f       	mov	r24, r24
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	fc 01       	movw	r30, r24
    222c:	e8 56       	subi	r30, 0x68	; 104
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	01 90       	ld	r0, Z+
    2232:	f0 81       	ld	r31, Z
    2234:	e0 2d       	mov	r30, r0
    2236:	80 81       	ld	r24, Z
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	88 2f       	mov	r24, r24
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a9 01       	movw	r20, r18
    2244:	02 c0       	rjmp	.+4      	; 0x224a <GPIO_u8_ReadPinVal+0x4e>
    2246:	55 95       	asr	r21
    2248:	47 95       	ror	r20
    224a:	8a 95       	dec	r24
    224c:	e2 f7       	brpl	.-8      	; 0x2246 <GPIO_u8_ReadPinVal+0x4a>
    224e:	ca 01       	movw	r24, r20
    2250:	81 70       	andi	r24, 0x01	; 1
    2252:	eb 81       	ldd	r30, Y+3	; 0x03
    2254:	fc 81       	ldd	r31, Y+4	; 0x04
    2256:	80 83       	st	Z, r24
		API_Status = No_error;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	89 83       	std	Y+1, r24	; 0x01
	}

	return API_Status ;
    225c:	89 81       	ldd	r24, Y+1	; 0x01

}
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	0f 90       	pop	r0
    2266:	0f 90       	pop	r0
    2268:	cf 91       	pop	r28
    226a:	df 91       	pop	r29
    226c:	08 95       	ret

0000226e <GPIO_u8_WritePinVal>:

/*Comment!: Write Pin Value */
u8 GPIO_u8_WritePinVal(u8 PinIdx,u8 PinVal , u8 Port_Name)
{
    226e:	df 93       	push	r29
    2270:	cf 93       	push	r28
    2272:	00 d0       	rcall	.+0      	; 0x2274 <GPIO_u8_WritePinVal+0x6>
    2274:	00 d0       	rcall	.+0      	; 0x2276 <GPIO_u8_WritePinVal+0x8>
    2276:	00 d0       	rcall	.+0      	; 0x2278 <GPIO_u8_WritePinVal+0xa>
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	8a 83       	std	Y+2, r24	; 0x02
    227e:	6b 83       	std	Y+3, r22	; 0x03
    2280:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	88 30       	cpi	r24, 0x08	; 8
    2286:	10 f0       	brcs	.+4      	; 0x228c <GPIO_u8_WritePinVal+0x1e>
	{
		API_Status = error_happen;
    2288:	19 82       	std	Y+1, r1	; 0x01
    228a:	4f c0       	rjmp	.+158    	; 0x232a <GPIO_u8_WritePinVal+0xbc>
	}
	else
	{
		switch(PinVal)
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	3e 83       	std	Y+6, r19	; 0x06
    2294:	2d 83       	std	Y+5, r18	; 0x05
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	29 f1       	breq	.+74     	; 0x22e8 <GPIO_u8_WritePinVal+0x7a>
    229e:	2d 81       	ldd	r18, Y+5	; 0x05
    22a0:	3e 81       	ldd	r19, Y+6	; 0x06
    22a2:	21 30       	cpi	r18, 0x01	; 1
    22a4:	31 05       	cpc	r19, r1
    22a6:	09 f0       	breq	.+2      	; 0x22aa <GPIO_u8_WritePinVal+0x3c>
    22a8:	3f c0       	rjmp	.+126    	; 0x2328 <GPIO_u8_WritePinVal+0xba>
		{
		case 1:
			*GPIO_ports[ get_port_index(Port_Name) ] |= 1<<PinIdx;
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	88 0f       	add	r24, r24
    22b6:	99 1f       	adc	r25, r25
    22b8:	fc 01       	movw	r30, r24
    22ba:	e8 57       	subi	r30, 0x78	; 120
    22bc:	fe 4f       	sbci	r31, 0xFE	; 254
    22be:	01 90       	ld	r0, Z+
    22c0:	f0 81       	ld	r31, Z
    22c2:	e0 2d       	mov	r30, r0
    22c4:	80 81       	ld	r24, Z
    22c6:	48 2f       	mov	r20, r24
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	28 2f       	mov	r18, r24
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	02 2e       	mov	r0, r18
    22d4:	02 c0       	rjmp	.+4      	; 0x22da <GPIO_u8_WritePinVal+0x6c>
    22d6:	88 0f       	add	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	0a 94       	dec	r0
    22dc:	e2 f7       	brpl	.-8      	; 0x22d6 <GPIO_u8_WritePinVal+0x68>
    22de:	84 2b       	or	r24, r20
    22e0:	80 83       	st	Z, r24
			API_Status = No_error;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	21 c0       	rjmp	.+66     	; 0x232a <GPIO_u8_WritePinVal+0xbc>
			break;
		case 0:
			*GPIO_ports[ get_port_index(Port_Name) ] &= ~(1<<PinIdx) ;
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    22ee:	88 2f       	mov	r24, r24
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	fc 01       	movw	r30, r24
    22f8:	e8 57       	subi	r30, 0x78	; 120
    22fa:	fe 4f       	sbci	r31, 0xFE	; 254
    22fc:	01 90       	ld	r0, Z+
    22fe:	f0 81       	ld	r31, Z
    2300:	e0 2d       	mov	r30, r0
    2302:	80 81       	ld	r24, Z
    2304:	48 2f       	mov	r20, r24
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	02 2e       	mov	r0, r18
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <GPIO_u8_WritePinVal+0xaa>
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	0a 94       	dec	r0
    231a:	e2 f7       	brpl	.-8      	; 0x2314 <GPIO_u8_WritePinVal+0xa6>
    231c:	80 95       	com	r24
    231e:	84 23       	and	r24, r20
    2320:	80 83       	st	Z, r24
			API_Status = No_error;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	89 83       	std	Y+1, r24	; 0x01
    2326:	01 c0       	rjmp	.+2      	; 0x232a <GPIO_u8_WritePinVal+0xbc>
			break;
		default:
			API_Status = error_happen;
    2328:	19 82       	std	Y+1, r1	; 0x01
			break;

		}
	}

	return API_Status ;
    232a:	89 81       	ldd	r24, Y+1	; 0x01

}
    232c:	26 96       	adiw	r28, 0x06	; 6
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	cf 91       	pop	r28
    233a:	df 91       	pop	r29
    233c:	08 95       	ret

0000233e <GPIO_u8_WritePinDir>:

//Direction
/*Comment!: Write Pin Direction */
u8 GPIO_u8_WritePinDir(u8 PinIdx,u8 PinDir , u8 Port_Name)
{
    233e:	df 93       	push	r29
    2340:	cf 93       	push	r28
    2342:	00 d0       	rcall	.+0      	; 0x2344 <GPIO_u8_WritePinDir+0x6>
    2344:	00 d0       	rcall	.+0      	; 0x2346 <GPIO_u8_WritePinDir+0x8>
    2346:	00 d0       	rcall	.+0      	; 0x2348 <GPIO_u8_WritePinDir+0xa>
    2348:	cd b7       	in	r28, 0x3d	; 61
    234a:	de b7       	in	r29, 0x3e	; 62
    234c:	8a 83       	std	Y+2, r24	; 0x02
    234e:	6b 83       	std	Y+3, r22	; 0x03
    2350:	4c 83       	std	Y+4, r20	; 0x04
	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	88 30       	cpi	r24, 0x08	; 8
    2356:	10 f0       	brcs	.+4      	; 0x235c <GPIO_u8_WritePinDir+0x1e>
	{
		API_Status = error_happen;
    2358:	19 82       	std	Y+1, r1	; 0x01
    235a:	4f c0       	rjmp	.+158    	; 0x23fa <GPIO_u8_WritePinDir+0xbc>
	}
	else
	{
		switch(PinDir)
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	3e 83       	std	Y+6, r19	; 0x06
    2364:	2d 83       	std	Y+5, r18	; 0x05
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	00 97       	sbiw	r24, 0x00	; 0
    236c:	29 f1       	breq	.+74     	; 0x23b8 <GPIO_u8_WritePinDir+0x7a>
    236e:	2d 81       	ldd	r18, Y+5	; 0x05
    2370:	3e 81       	ldd	r19, Y+6	; 0x06
    2372:	21 30       	cpi	r18, 0x01	; 1
    2374:	31 05       	cpc	r19, r1
    2376:	09 f0       	breq	.+2      	; 0x237a <GPIO_u8_WritePinDir+0x3c>
    2378:	3f c0       	rjmp	.+126    	; 0x23f8 <GPIO_u8_WritePinDir+0xba>
		{
		case 1:
			*GPIO_dirs[ get_port_index(Port_Name) ] |= 1<<PinIdx;
    237a:	8c 81       	ldd	r24, Y+4	; 0x04
    237c:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	fc 01       	movw	r30, r24
    238a:	e0 57       	subi	r30, 0x70	; 112
    238c:	fe 4f       	sbci	r31, 0xFE	; 254
    238e:	01 90       	ld	r0, Z+
    2390:	f0 81       	ld	r31, Z
    2392:	e0 2d       	mov	r30, r0
    2394:	80 81       	ld	r24, Z
    2396:	48 2f       	mov	r20, r24
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <GPIO_u8_WritePinDir+0x6c>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <GPIO_u8_WritePinDir+0x68>
    23ae:	84 2b       	or	r24, r20
    23b0:	80 83       	st	Z, r24
			API_Status = No_error;
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	89 83       	std	Y+1, r24	; 0x01
    23b6:	21 c0       	rjmp	.+66     	; 0x23fa <GPIO_u8_WritePinDir+0xbc>
			break;
		case 0:
			*GPIO_dirs[ get_port_index(Port_Name) ] &= ~(1<<PinIdx) ;
    23b8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ba:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    23be:	88 2f       	mov	r24, r24
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	fc 01       	movw	r30, r24
    23c8:	e0 57       	subi	r30, 0x70	; 112
    23ca:	fe 4f       	sbci	r31, 0xFE	; 254
    23cc:	01 90       	ld	r0, Z+
    23ce:	f0 81       	ld	r31, Z
    23d0:	e0 2d       	mov	r30, r0
    23d2:	80 81       	ld	r24, Z
    23d4:	48 2f       	mov	r20, r24
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	02 2e       	mov	r0, r18
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <GPIO_u8_WritePinDir+0xaa>
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	0a 94       	dec	r0
    23ea:	e2 f7       	brpl	.-8      	; 0x23e4 <GPIO_u8_WritePinDir+0xa6>
    23ec:	80 95       	com	r24
    23ee:	84 23       	and	r24, r20
    23f0:	80 83       	st	Z, r24
			API_Status = No_error;
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	89 83       	std	Y+1, r24	; 0x01
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <GPIO_u8_WritePinDir+0xbc>
			break;
		default:
			API_Status = error_happen;
    23f8:	19 82       	std	Y+1, r1	; 0x01
			break;

		}
	}

	return API_Status ;
    23fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    23fc:	26 96       	adiw	r28, 0x06	; 6
    23fe:	0f b6       	in	r0, 0x3f	; 63
    2400:	f8 94       	cli
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	0f be       	out	0x3f, r0	; 63
    2406:	cd bf       	out	0x3d, r28	; 61
    2408:	cf 91       	pop	r28
    240a:	df 91       	pop	r29
    240c:	08 95       	ret

0000240e <GPIO_u8_ReadPinDir>:

/*Comment!: Read Pin Direction */
u8 GPIO_u8_ReadPinDir(u8 PinIdx,u8* PtrToDir , u8 Port_Name )
{
    240e:	df 93       	push	r29
    2410:	cf 93       	push	r28
    2412:	00 d0       	rcall	.+0      	; 0x2414 <GPIO_u8_ReadPinDir+0x6>
    2414:	00 d0       	rcall	.+0      	; 0x2416 <GPIO_u8_ReadPinDir+0x8>
    2416:	0f 92       	push	r0
    2418:	cd b7       	in	r28, 0x3d	; 61
    241a:	de b7       	in	r29, 0x3e	; 62
    241c:	8a 83       	std	Y+2, r24	; 0x02
    241e:	7c 83       	std	Y+4, r23	; 0x04
    2420:	6b 83       	std	Y+3, r22	; 0x03
    2422:	4d 83       	std	Y+5, r20	; 0x05

	u8 API_Status ;

	if(PinIdx > no_of_pins_on_port - 1)
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	88 30       	cpi	r24, 0x08	; 8
    2428:	10 f0       	brcs	.+4      	; 0x242e <GPIO_u8_ReadPinDir+0x20>
	{
		API_Status = error_happen;
    242a:	19 82       	std	Y+1, r1	; 0x01
    242c:	20 c0       	rjmp	.+64     	; 0x246e <GPIO_u8_ReadPinDir+0x60>
	}
	else
	{
		*PtrToDir =  ((*GPIO_dirs [ get_port_index(Port_Name) ] >> PinIdx) & 1) ;
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    2434:	88 2f       	mov	r24, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	fc 01       	movw	r30, r24
    243e:	e0 57       	subi	r30, 0x70	; 112
    2440:	fe 4f       	sbci	r31, 0xFE	; 254
    2442:	01 90       	ld	r0, Z+
    2444:	f0 81       	ld	r31, Z
    2446:	e0 2d       	mov	r30, r0
    2448:	80 81       	ld	r24, Z
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	88 2f       	mov	r24, r24
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	a9 01       	movw	r20, r18
    2456:	02 c0       	rjmp	.+4      	; 0x245c <GPIO_u8_ReadPinDir+0x4e>
    2458:	55 95       	asr	r21
    245a:	47 95       	ror	r20
    245c:	8a 95       	dec	r24
    245e:	e2 f7       	brpl	.-8      	; 0x2458 <GPIO_u8_ReadPinDir+0x4a>
    2460:	ca 01       	movw	r24, r20
    2462:	81 70       	andi	r24, 0x01	; 1
    2464:	eb 81       	ldd	r30, Y+3	; 0x03
    2466:	fc 81       	ldd	r31, Y+4	; 0x04
    2468:	80 83       	st	Z, r24
		API_Status = No_error;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	89 83       	std	Y+1, r24	; 0x01
	}

	return API_Status ;
    246e:	89 81       	ldd	r24, Y+1	; 0x01


}
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	cf 91       	pop	r28
    247c:	df 91       	pop	r29
    247e:	08 95       	ret

00002480 <GPIO_u8_ReadPortVal>:
/////////////////////////////////////////////////
//===================PORT==========================
//Data
/*Comment!: Read Port Value */
u8 GPIO_u8_ReadPortVal(u8* PtrToVal , u8 Port_Name)
{
    2480:	df 93       	push	r29
    2482:	cf 93       	push	r28
    2484:	00 d0       	rcall	.+0      	; 0x2486 <GPIO_u8_ReadPortVal+0x6>
    2486:	0f 92       	push	r0
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	6b 83       	std	Y+3, r22	; 0x03

	*PtrToVal =  *GPIO_pins [ get_port_index(Port_Name) ] ;
    2492:	8b 81       	ldd	r24, Y+3	; 0x03
    2494:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    2498:	88 2f       	mov	r24, r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	fc 01       	movw	r30, r24
    24a2:	e8 56       	subi	r30, 0x68	; 104
    24a4:	fe 4f       	sbci	r31, 0xFE	; 254
    24a6:	01 90       	ld	r0, Z+
    24a8:	f0 81       	ld	r31, Z
    24aa:	e0 2d       	mov	r30, r0
    24ac:	80 81       	ld	r24, Z
    24ae:	e9 81       	ldd	r30, Y+1	; 0x01
    24b0:	fa 81       	ldd	r31, Y+2	; 0x02
    24b2:	80 83       	st	Z, r24

	return No_error ;
    24b4:	81 e0       	ldi	r24, 0x01	; 1

}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <GPIO_u8_WritePortVal>:

/*Comment!: Write Port Value */
u8 GPIO_u8_WritePortVal(u8 PortVal , u8 Port_Name)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <GPIO_u8_WritePortVal+0x6>
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	6a 83       	std	Y+2, r22	; 0x02
	*GPIO_ports[ get_port_index(Port_Name) ] = PortVal ;
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	88 0f       	add	r24, r24
    24dc:	99 1f       	adc	r25, r25
    24de:	fc 01       	movw	r30, r24
    24e0:	e8 57       	subi	r30, 0x78	; 120
    24e2:	fe 4f       	sbci	r31, 0xFE	; 254
    24e4:	01 90       	ld	r0, Z+
    24e6:	f0 81       	ld	r31, Z
    24e8:	e0 2d       	mov	r30, r0
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	80 83       	st	Z, r24
	return No_error ;
    24ee:	81 e0       	ldi	r24, 0x01	; 1


}
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <GPIO_u8_WritePortDir>:

//Direction
/*Comment!: Write Port Direction */
u8 GPIO_u8_WritePortDir(u8 PortDir, u8 Port_Name)
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <GPIO_u8_WritePortDir+0x6>
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	6a 83       	std	Y+2, r22	; 0x02
	  *GPIO_dirs [ get_port_index(Port_Name) ] = PortDir;
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	fc 01       	movw	r30, r24
    2518:	e0 57       	subi	r30, 0x70	; 112
    251a:	fe 4f       	sbci	r31, 0xFE	; 254
    251c:	01 90       	ld	r0, Z+
    251e:	f0 81       	ld	r31, Z
    2520:	e0 2d       	mov	r30, r0
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	80 83       	st	Z, r24

	return No_error ;
    2526:	81 e0       	ldi	r24, 0x01	; 1

}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	08 95       	ret

00002532 <GPIO_u8_ReadPortDir>:

/*Comment!: Read Port Direction */
u8 GPIO_u8_ReadPortDir(u8* PtrToDir, u8 Port_Name)
{
    2532:	df 93       	push	r29
    2534:	cf 93       	push	r28
    2536:	00 d0       	rcall	.+0      	; 0x2538 <GPIO_u8_ReadPortDir+0x6>
    2538:	0f 92       	push	r0
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	6b 83       	std	Y+3, r22	; 0x03
	*PtrToDir =  *GPIO_dirs[ get_port_index(Port_Name) ] ;
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	0e 94 90 10 	call	0x2120	; 0x2120 <get_port_index>
    254a:	88 2f       	mov	r24, r24
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	fc 01       	movw	r30, r24
    2554:	e0 57       	subi	r30, 0x70	; 112
    2556:	fe 4f       	sbci	r31, 0xFE	; 254
    2558:	01 90       	ld	r0, Z+
    255a:	f0 81       	ld	r31, Z
    255c:	e0 2d       	mov	r30, r0
    255e:	80 81       	ld	r24, Z
    2560:	e9 81       	ldd	r30, Y+1	; 0x01
    2562:	fa 81       	ldd	r31, Y+2	; 0x02
    2564:	80 83       	st	Z, r24

	return No_error ;
    2566:	81 e0       	ldi	r24, 0x01	; 1


}
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	cf 91       	pop	r28
    2570:	df 91       	pop	r29
    2572:	08 95       	ret

00002574 <main>:
 *      Author: Keroles Shenouda
 *      https://www.facebook.com/groups/embedded.system.KS/
 */
#include <avr/io.h>

int main (void){
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	0f 92       	push	r0
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	unsigned char ch=0;
    257e:	19 82       	std	Y+1, r1	; 0x01
DDRA |= 1<<4 ;
    2580:	aa e3       	ldi	r26, 0x3A	; 58
    2582:	b0 e0       	ldi	r27, 0x00	; 0
    2584:	ea e3       	ldi	r30, 0x3A	; 58
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	80 61       	ori	r24, 0x10	; 16
    258c:	8c 93       	st	X, r24
	while(1){
		PORTA |= 1<<4;
    258e:	ab e3       	ldi	r26, 0x3B	; 59
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	eb e3       	ldi	r30, 0x3B	; 59
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	80 81       	ld	r24, Z
    2598:	80 61       	ori	r24, 0x10	; 16
    259a:	8c 93       	st	X, r24
    259c:	f8 cf       	rjmp	.-16     	; 0x258e <main+0x1a>

0000259e <__prologue_saves__>:
    259e:	2f 92       	push	r2
    25a0:	3f 92       	push	r3
    25a2:	4f 92       	push	r4
    25a4:	5f 92       	push	r5
    25a6:	6f 92       	push	r6
    25a8:	7f 92       	push	r7
    25aa:	8f 92       	push	r8
    25ac:	9f 92       	push	r9
    25ae:	af 92       	push	r10
    25b0:	bf 92       	push	r11
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	ca 1b       	sub	r28, r26
    25c8:	db 0b       	sbc	r29, r27
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	09 94       	ijmp

000025d6 <__epilogue_restores__>:
    25d6:	2a 88       	ldd	r2, Y+18	; 0x12
    25d8:	39 88       	ldd	r3, Y+17	; 0x11
    25da:	48 88       	ldd	r4, Y+16	; 0x10
    25dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    25de:	6e 84       	ldd	r6, Y+14	; 0x0e
    25e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25e8:	b9 84       	ldd	r11, Y+9	; 0x09
    25ea:	c8 84       	ldd	r12, Y+8	; 0x08
    25ec:	df 80       	ldd	r13, Y+7	; 0x07
    25ee:	ee 80       	ldd	r14, Y+6	; 0x06
    25f0:	fd 80       	ldd	r15, Y+5	; 0x05
    25f2:	0c 81       	ldd	r16, Y+4	; 0x04
    25f4:	1b 81       	ldd	r17, Y+3	; 0x03
    25f6:	aa 81       	ldd	r26, Y+2	; 0x02
    25f8:	b9 81       	ldd	r27, Y+1	; 0x01
    25fa:	ce 0f       	add	r28, r30
    25fc:	d1 1d       	adc	r29, r1
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	ed 01       	movw	r28, r26
    260a:	08 95       	ret

0000260c <sprintf>:
    260c:	ae e0       	ldi	r26, 0x0E	; 14
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ec e0       	ldi	r30, 0x0C	; 12
    2612:	f3 e1       	ldi	r31, 0x13	; 19
    2614:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__prologue_saves__+0x1c>
    2618:	0d 89       	ldd	r16, Y+21	; 0x15
    261a:	1e 89       	ldd	r17, Y+22	; 0x16
    261c:	86 e0       	ldi	r24, 0x06	; 6
    261e:	8c 83       	std	Y+4, r24	; 0x04
    2620:	1a 83       	std	Y+2, r17	; 0x02
    2622:	09 83       	std	Y+1, r16	; 0x01
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	9f e7       	ldi	r25, 0x7F	; 127
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	9e 01       	movw	r18, r28
    262e:	27 5e       	subi	r18, 0xE7	; 231
    2630:	3f 4f       	sbci	r19, 0xFF	; 255
    2632:	ce 01       	movw	r24, r28
    2634:	01 96       	adiw	r24, 0x01	; 1
    2636:	6f 89       	ldd	r22, Y+23	; 0x17
    2638:	78 8d       	ldd	r23, Y+24	; 0x18
    263a:	a9 01       	movw	r20, r18
    263c:	0e 94 2a 13 	call	0x2654	; 0x2654 <vfprintf>
    2640:	2f 81       	ldd	r18, Y+7	; 0x07
    2642:	38 85       	ldd	r19, Y+8	; 0x08
    2644:	02 0f       	add	r16, r18
    2646:	13 1f       	adc	r17, r19
    2648:	f8 01       	movw	r30, r16
    264a:	10 82       	st	Z, r1
    264c:	2e 96       	adiw	r28, 0x0e	; 14
    264e:	e4 e0       	ldi	r30, 0x04	; 4
    2650:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__epilogue_restores__+0x1c>

00002654 <vfprintf>:
    2654:	ab e0       	ldi	r26, 0x0B	; 11
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	e0 e3       	ldi	r30, 0x30	; 48
    265a:	f3 e1       	ldi	r31, 0x13	; 19
    265c:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
    2660:	3c 01       	movw	r6, r24
    2662:	2b 01       	movw	r4, r22
    2664:	5a 01       	movw	r10, r20
    2666:	fc 01       	movw	r30, r24
    2668:	17 82       	std	Z+7, r1	; 0x07
    266a:	16 82       	std	Z+6, r1	; 0x06
    266c:	83 81       	ldd	r24, Z+3	; 0x03
    266e:	81 fd       	sbrc	r24, 1
    2670:	03 c0       	rjmp	.+6      	; 0x2678 <vfprintf+0x24>
    2672:	6f ef       	ldi	r22, 0xFF	; 255
    2674:	7f ef       	ldi	r23, 0xFF	; 255
    2676:	c6 c1       	rjmp	.+908    	; 0x2a04 <vfprintf+0x3b0>
    2678:	9a e0       	ldi	r25, 0x0A	; 10
    267a:	89 2e       	mov	r8, r25
    267c:	1e 01       	movw	r2, r28
    267e:	08 94       	sec
    2680:	21 1c       	adc	r2, r1
    2682:	31 1c       	adc	r3, r1
    2684:	f3 01       	movw	r30, r6
    2686:	23 81       	ldd	r18, Z+3	; 0x03
    2688:	f2 01       	movw	r30, r4
    268a:	23 fd       	sbrc	r18, 3
    268c:	85 91       	lpm	r24, Z+
    268e:	23 ff       	sbrs	r18, 3
    2690:	81 91       	ld	r24, Z+
    2692:	2f 01       	movw	r4, r30
    2694:	88 23       	and	r24, r24
    2696:	09 f4       	brne	.+2      	; 0x269a <vfprintf+0x46>
    2698:	b2 c1       	rjmp	.+868    	; 0x29fe <vfprintf+0x3aa>
    269a:	85 32       	cpi	r24, 0x25	; 37
    269c:	39 f4       	brne	.+14     	; 0x26ac <vfprintf+0x58>
    269e:	23 fd       	sbrc	r18, 3
    26a0:	85 91       	lpm	r24, Z+
    26a2:	23 ff       	sbrs	r18, 3
    26a4:	81 91       	ld	r24, Z+
    26a6:	2f 01       	movw	r4, r30
    26a8:	85 32       	cpi	r24, 0x25	; 37
    26aa:	29 f4       	brne	.+10     	; 0x26b6 <vfprintf+0x62>
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	b3 01       	movw	r22, r6
    26b0:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    26b4:	e7 cf       	rjmp	.-50     	; 0x2684 <vfprintf+0x30>
    26b6:	98 2f       	mov	r25, r24
    26b8:	ff 24       	eor	r15, r15
    26ba:	ee 24       	eor	r14, r14
    26bc:	99 24       	eor	r9, r9
    26be:	ff e1       	ldi	r31, 0x1F	; 31
    26c0:	ff 15       	cp	r31, r15
    26c2:	d0 f0       	brcs	.+52     	; 0x26f8 <vfprintf+0xa4>
    26c4:	9b 32       	cpi	r25, 0x2B	; 43
    26c6:	69 f0       	breq	.+26     	; 0x26e2 <vfprintf+0x8e>
    26c8:	9c 32       	cpi	r25, 0x2C	; 44
    26ca:	28 f4       	brcc	.+10     	; 0x26d6 <vfprintf+0x82>
    26cc:	90 32       	cpi	r25, 0x20	; 32
    26ce:	59 f0       	breq	.+22     	; 0x26e6 <vfprintf+0x92>
    26d0:	93 32       	cpi	r25, 0x23	; 35
    26d2:	91 f4       	brne	.+36     	; 0x26f8 <vfprintf+0xa4>
    26d4:	0e c0       	rjmp	.+28     	; 0x26f2 <vfprintf+0x9e>
    26d6:	9d 32       	cpi	r25, 0x2D	; 45
    26d8:	49 f0       	breq	.+18     	; 0x26ec <vfprintf+0x98>
    26da:	90 33       	cpi	r25, 0x30	; 48
    26dc:	69 f4       	brne	.+26     	; 0x26f8 <vfprintf+0xa4>
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	24 c0       	rjmp	.+72     	; 0x272a <vfprintf+0xd6>
    26e2:	52 e0       	ldi	r21, 0x02	; 2
    26e4:	f5 2a       	or	r15, r21
    26e6:	84 e0       	ldi	r24, 0x04	; 4
    26e8:	f8 2a       	or	r15, r24
    26ea:	28 c0       	rjmp	.+80     	; 0x273c <vfprintf+0xe8>
    26ec:	98 e0       	ldi	r25, 0x08	; 8
    26ee:	f9 2a       	or	r15, r25
    26f0:	25 c0       	rjmp	.+74     	; 0x273c <vfprintf+0xe8>
    26f2:	e0 e1       	ldi	r30, 0x10	; 16
    26f4:	fe 2a       	or	r15, r30
    26f6:	22 c0       	rjmp	.+68     	; 0x273c <vfprintf+0xe8>
    26f8:	f7 fc       	sbrc	r15, 7
    26fa:	29 c0       	rjmp	.+82     	; 0x274e <vfprintf+0xfa>
    26fc:	89 2f       	mov	r24, r25
    26fe:	80 53       	subi	r24, 0x30	; 48
    2700:	8a 30       	cpi	r24, 0x0A	; 10
    2702:	70 f4       	brcc	.+28     	; 0x2720 <vfprintf+0xcc>
    2704:	f6 fe       	sbrs	r15, 6
    2706:	05 c0       	rjmp	.+10     	; 0x2712 <vfprintf+0xbe>
    2708:	98 9c       	mul	r9, r8
    270a:	90 2c       	mov	r9, r0
    270c:	11 24       	eor	r1, r1
    270e:	98 0e       	add	r9, r24
    2710:	15 c0       	rjmp	.+42     	; 0x273c <vfprintf+0xe8>
    2712:	e8 9c       	mul	r14, r8
    2714:	e0 2c       	mov	r14, r0
    2716:	11 24       	eor	r1, r1
    2718:	e8 0e       	add	r14, r24
    271a:	f0 e2       	ldi	r31, 0x20	; 32
    271c:	ff 2a       	or	r15, r31
    271e:	0e c0       	rjmp	.+28     	; 0x273c <vfprintf+0xe8>
    2720:	9e 32       	cpi	r25, 0x2E	; 46
    2722:	29 f4       	brne	.+10     	; 0x272e <vfprintf+0xda>
    2724:	f6 fc       	sbrc	r15, 6
    2726:	6b c1       	rjmp	.+726    	; 0x29fe <vfprintf+0x3aa>
    2728:	40 e4       	ldi	r20, 0x40	; 64
    272a:	f4 2a       	or	r15, r20
    272c:	07 c0       	rjmp	.+14     	; 0x273c <vfprintf+0xe8>
    272e:	9c 36       	cpi	r25, 0x6C	; 108
    2730:	19 f4       	brne	.+6      	; 0x2738 <vfprintf+0xe4>
    2732:	50 e8       	ldi	r21, 0x80	; 128
    2734:	f5 2a       	or	r15, r21
    2736:	02 c0       	rjmp	.+4      	; 0x273c <vfprintf+0xe8>
    2738:	98 36       	cpi	r25, 0x68	; 104
    273a:	49 f4       	brne	.+18     	; 0x274e <vfprintf+0xfa>
    273c:	f2 01       	movw	r30, r4
    273e:	23 fd       	sbrc	r18, 3
    2740:	95 91       	lpm	r25, Z+
    2742:	23 ff       	sbrs	r18, 3
    2744:	91 91       	ld	r25, Z+
    2746:	2f 01       	movw	r4, r30
    2748:	99 23       	and	r25, r25
    274a:	09 f0       	breq	.+2      	; 0x274e <vfprintf+0xfa>
    274c:	b8 cf       	rjmp	.-144    	; 0x26be <vfprintf+0x6a>
    274e:	89 2f       	mov	r24, r25
    2750:	85 54       	subi	r24, 0x45	; 69
    2752:	83 30       	cpi	r24, 0x03	; 3
    2754:	18 f0       	brcs	.+6      	; 0x275c <vfprintf+0x108>
    2756:	80 52       	subi	r24, 0x20	; 32
    2758:	83 30       	cpi	r24, 0x03	; 3
    275a:	38 f4       	brcc	.+14     	; 0x276a <vfprintf+0x116>
    275c:	44 e0       	ldi	r20, 0x04	; 4
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	a4 0e       	add	r10, r20
    2762:	b5 1e       	adc	r11, r21
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	59 83       	std	Y+1, r21	; 0x01
    2768:	0f c0       	rjmp	.+30     	; 0x2788 <vfprintf+0x134>
    276a:	93 36       	cpi	r25, 0x63	; 99
    276c:	31 f0       	breq	.+12     	; 0x277a <vfprintf+0x126>
    276e:	93 37       	cpi	r25, 0x73	; 115
    2770:	79 f0       	breq	.+30     	; 0x2790 <vfprintf+0x13c>
    2772:	93 35       	cpi	r25, 0x53	; 83
    2774:	09 f0       	breq	.+2      	; 0x2778 <vfprintf+0x124>
    2776:	56 c0       	rjmp	.+172    	; 0x2824 <vfprintf+0x1d0>
    2778:	20 c0       	rjmp	.+64     	; 0x27ba <vfprintf+0x166>
    277a:	f5 01       	movw	r30, r10
    277c:	80 81       	ld	r24, Z
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	42 e0       	ldi	r20, 0x02	; 2
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	a4 0e       	add	r10, r20
    2786:	b5 1e       	adc	r11, r21
    2788:	61 01       	movw	r12, r2
    278a:	01 e0       	ldi	r16, 0x01	; 1
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	12 c0       	rjmp	.+36     	; 0x27b4 <vfprintf+0x160>
    2790:	f5 01       	movw	r30, r10
    2792:	c0 80       	ld	r12, Z
    2794:	d1 80       	ldd	r13, Z+1	; 0x01
    2796:	f6 fc       	sbrc	r15, 6
    2798:	03 c0       	rjmp	.+6      	; 0x27a0 <vfprintf+0x14c>
    279a:	6f ef       	ldi	r22, 0xFF	; 255
    279c:	7f ef       	ldi	r23, 0xFF	; 255
    279e:	02 c0       	rjmp	.+4      	; 0x27a4 <vfprintf+0x150>
    27a0:	69 2d       	mov	r22, r9
    27a2:	70 e0       	ldi	r23, 0x00	; 0
    27a4:	42 e0       	ldi	r20, 0x02	; 2
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	a4 0e       	add	r10, r20
    27aa:	b5 1e       	adc	r11, r21
    27ac:	c6 01       	movw	r24, r12
    27ae:	0e 94 12 15 	call	0x2a24	; 0x2a24 <strnlen>
    27b2:	8c 01       	movw	r16, r24
    27b4:	5f e7       	ldi	r21, 0x7F	; 127
    27b6:	f5 22       	and	r15, r21
    27b8:	14 c0       	rjmp	.+40     	; 0x27e2 <vfprintf+0x18e>
    27ba:	f5 01       	movw	r30, r10
    27bc:	c0 80       	ld	r12, Z
    27be:	d1 80       	ldd	r13, Z+1	; 0x01
    27c0:	f6 fc       	sbrc	r15, 6
    27c2:	03 c0       	rjmp	.+6      	; 0x27ca <vfprintf+0x176>
    27c4:	6f ef       	ldi	r22, 0xFF	; 255
    27c6:	7f ef       	ldi	r23, 0xFF	; 255
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <vfprintf+0x17a>
    27ca:	69 2d       	mov	r22, r9
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	42 e0       	ldi	r20, 0x02	; 2
    27d0:	50 e0       	ldi	r21, 0x00	; 0
    27d2:	a4 0e       	add	r10, r20
    27d4:	b5 1e       	adc	r11, r21
    27d6:	c6 01       	movw	r24, r12
    27d8:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <strnlen_P>
    27dc:	8c 01       	movw	r16, r24
    27de:	50 e8       	ldi	r21, 0x80	; 128
    27e0:	f5 2a       	or	r15, r21
    27e2:	f3 fe       	sbrs	r15, 3
    27e4:	07 c0       	rjmp	.+14     	; 0x27f4 <vfprintf+0x1a0>
    27e6:	1a c0       	rjmp	.+52     	; 0x281c <vfprintf+0x1c8>
    27e8:	80 e2       	ldi	r24, 0x20	; 32
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	b3 01       	movw	r22, r6
    27ee:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    27f2:	ea 94       	dec	r14
    27f4:	8e 2d       	mov	r24, r14
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	08 17       	cp	r16, r24
    27fa:	19 07       	cpc	r17, r25
    27fc:	a8 f3       	brcs	.-22     	; 0x27e8 <vfprintf+0x194>
    27fe:	0e c0       	rjmp	.+28     	; 0x281c <vfprintf+0x1c8>
    2800:	f6 01       	movw	r30, r12
    2802:	f7 fc       	sbrc	r15, 7
    2804:	85 91       	lpm	r24, Z+
    2806:	f7 fe       	sbrs	r15, 7
    2808:	81 91       	ld	r24, Z+
    280a:	6f 01       	movw	r12, r30
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	b3 01       	movw	r22, r6
    2810:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    2814:	e1 10       	cpse	r14, r1
    2816:	ea 94       	dec	r14
    2818:	01 50       	subi	r16, 0x01	; 1
    281a:	10 40       	sbci	r17, 0x00	; 0
    281c:	01 15       	cp	r16, r1
    281e:	11 05       	cpc	r17, r1
    2820:	79 f7       	brne	.-34     	; 0x2800 <vfprintf+0x1ac>
    2822:	ea c0       	rjmp	.+468    	; 0x29f8 <vfprintf+0x3a4>
    2824:	94 36       	cpi	r25, 0x64	; 100
    2826:	11 f0       	breq	.+4      	; 0x282c <vfprintf+0x1d8>
    2828:	99 36       	cpi	r25, 0x69	; 105
    282a:	69 f5       	brne	.+90     	; 0x2886 <vfprintf+0x232>
    282c:	f7 fe       	sbrs	r15, 7
    282e:	08 c0       	rjmp	.+16     	; 0x2840 <vfprintf+0x1ec>
    2830:	f5 01       	movw	r30, r10
    2832:	20 81       	ld	r18, Z
    2834:	31 81       	ldd	r19, Z+1	; 0x01
    2836:	42 81       	ldd	r20, Z+2	; 0x02
    2838:	53 81       	ldd	r21, Z+3	; 0x03
    283a:	84 e0       	ldi	r24, 0x04	; 4
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	0a c0       	rjmp	.+20     	; 0x2854 <vfprintf+0x200>
    2840:	f5 01       	movw	r30, r10
    2842:	80 81       	ld	r24, Z
    2844:	91 81       	ldd	r25, Z+1	; 0x01
    2846:	9c 01       	movw	r18, r24
    2848:	44 27       	eor	r20, r20
    284a:	37 fd       	sbrc	r19, 7
    284c:	40 95       	com	r20
    284e:	54 2f       	mov	r21, r20
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	a8 0e       	add	r10, r24
    2856:	b9 1e       	adc	r11, r25
    2858:	9f e6       	ldi	r25, 0x6F	; 111
    285a:	f9 22       	and	r15, r25
    285c:	57 ff       	sbrs	r21, 7
    285e:	09 c0       	rjmp	.+18     	; 0x2872 <vfprintf+0x21e>
    2860:	50 95       	com	r21
    2862:	40 95       	com	r20
    2864:	30 95       	com	r19
    2866:	21 95       	neg	r18
    2868:	3f 4f       	sbci	r19, 0xFF	; 255
    286a:	4f 4f       	sbci	r20, 0xFF	; 255
    286c:	5f 4f       	sbci	r21, 0xFF	; 255
    286e:	e0 e8       	ldi	r30, 0x80	; 128
    2870:	fe 2a       	or	r15, r30
    2872:	ca 01       	movw	r24, r20
    2874:	b9 01       	movw	r22, r18
    2876:	a1 01       	movw	r20, r2
    2878:	2a e0       	ldi	r18, 0x0A	; 10
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__ultoa_invert>
    2880:	d8 2e       	mov	r13, r24
    2882:	d2 18       	sub	r13, r2
    2884:	40 c0       	rjmp	.+128    	; 0x2906 <vfprintf+0x2b2>
    2886:	95 37       	cpi	r25, 0x75	; 117
    2888:	29 f4       	brne	.+10     	; 0x2894 <vfprintf+0x240>
    288a:	1f 2d       	mov	r17, r15
    288c:	1f 7e       	andi	r17, 0xEF	; 239
    288e:	2a e0       	ldi	r18, 0x0A	; 10
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	1d c0       	rjmp	.+58     	; 0x28ce <vfprintf+0x27a>
    2894:	1f 2d       	mov	r17, r15
    2896:	19 7f       	andi	r17, 0xF9	; 249
    2898:	9f 36       	cpi	r25, 0x6F	; 111
    289a:	61 f0       	breq	.+24     	; 0x28b4 <vfprintf+0x260>
    289c:	90 37       	cpi	r25, 0x70	; 112
    289e:	20 f4       	brcc	.+8      	; 0x28a8 <vfprintf+0x254>
    28a0:	98 35       	cpi	r25, 0x58	; 88
    28a2:	09 f0       	breq	.+2      	; 0x28a6 <vfprintf+0x252>
    28a4:	ac c0       	rjmp	.+344    	; 0x29fe <vfprintf+0x3aa>
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <vfprintf+0x272>
    28a8:	90 37       	cpi	r25, 0x70	; 112
    28aa:	39 f0       	breq	.+14     	; 0x28ba <vfprintf+0x266>
    28ac:	98 37       	cpi	r25, 0x78	; 120
    28ae:	09 f0       	breq	.+2      	; 0x28b2 <vfprintf+0x25e>
    28b0:	a6 c0       	rjmp	.+332    	; 0x29fe <vfprintf+0x3aa>
    28b2:	04 c0       	rjmp	.+8      	; 0x28bc <vfprintf+0x268>
    28b4:	28 e0       	ldi	r18, 0x08	; 8
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	0a c0       	rjmp	.+20     	; 0x28ce <vfprintf+0x27a>
    28ba:	10 61       	ori	r17, 0x10	; 16
    28bc:	14 fd       	sbrc	r17, 4
    28be:	14 60       	ori	r17, 0x04	; 4
    28c0:	20 e1       	ldi	r18, 0x10	; 16
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	04 c0       	rjmp	.+8      	; 0x28ce <vfprintf+0x27a>
    28c6:	14 fd       	sbrc	r17, 4
    28c8:	16 60       	ori	r17, 0x06	; 6
    28ca:	20 e1       	ldi	r18, 0x10	; 16
    28cc:	32 e0       	ldi	r19, 0x02	; 2
    28ce:	17 ff       	sbrs	r17, 7
    28d0:	08 c0       	rjmp	.+16     	; 0x28e2 <vfprintf+0x28e>
    28d2:	f5 01       	movw	r30, r10
    28d4:	60 81       	ld	r22, Z
    28d6:	71 81       	ldd	r23, Z+1	; 0x01
    28d8:	82 81       	ldd	r24, Z+2	; 0x02
    28da:	93 81       	ldd	r25, Z+3	; 0x03
    28dc:	44 e0       	ldi	r20, 0x04	; 4
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	08 c0       	rjmp	.+16     	; 0x28f2 <vfprintf+0x29e>
    28e2:	f5 01       	movw	r30, r10
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	bc 01       	movw	r22, r24
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	42 e0       	ldi	r20, 0x02	; 2
    28f0:	50 e0       	ldi	r21, 0x00	; 0
    28f2:	a4 0e       	add	r10, r20
    28f4:	b5 1e       	adc	r11, r21
    28f6:	a1 01       	movw	r20, r2
    28f8:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__ultoa_invert>
    28fc:	d8 2e       	mov	r13, r24
    28fe:	d2 18       	sub	r13, r2
    2900:	8f e7       	ldi	r24, 0x7F	; 127
    2902:	f8 2e       	mov	r15, r24
    2904:	f1 22       	and	r15, r17
    2906:	f6 fe       	sbrs	r15, 6
    2908:	0b c0       	rjmp	.+22     	; 0x2920 <vfprintf+0x2cc>
    290a:	5e ef       	ldi	r21, 0xFE	; 254
    290c:	f5 22       	and	r15, r21
    290e:	d9 14       	cp	r13, r9
    2910:	38 f4       	brcc	.+14     	; 0x2920 <vfprintf+0x2cc>
    2912:	f4 fe       	sbrs	r15, 4
    2914:	07 c0       	rjmp	.+14     	; 0x2924 <vfprintf+0x2d0>
    2916:	f2 fc       	sbrc	r15, 2
    2918:	05 c0       	rjmp	.+10     	; 0x2924 <vfprintf+0x2d0>
    291a:	8f ee       	ldi	r24, 0xEF	; 239
    291c:	f8 22       	and	r15, r24
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <vfprintf+0x2d0>
    2920:	1d 2d       	mov	r17, r13
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <vfprintf+0x2d2>
    2924:	19 2d       	mov	r17, r9
    2926:	f4 fe       	sbrs	r15, 4
    2928:	0d c0       	rjmp	.+26     	; 0x2944 <vfprintf+0x2f0>
    292a:	fe 01       	movw	r30, r28
    292c:	ed 0d       	add	r30, r13
    292e:	f1 1d       	adc	r31, r1
    2930:	80 81       	ld	r24, Z
    2932:	80 33       	cpi	r24, 0x30	; 48
    2934:	19 f4       	brne	.+6      	; 0x293c <vfprintf+0x2e8>
    2936:	99 ee       	ldi	r25, 0xE9	; 233
    2938:	f9 22       	and	r15, r25
    293a:	08 c0       	rjmp	.+16     	; 0x294c <vfprintf+0x2f8>
    293c:	1f 5f       	subi	r17, 0xFF	; 255
    293e:	f2 fe       	sbrs	r15, 2
    2940:	05 c0       	rjmp	.+10     	; 0x294c <vfprintf+0x2f8>
    2942:	03 c0       	rjmp	.+6      	; 0x294a <vfprintf+0x2f6>
    2944:	8f 2d       	mov	r24, r15
    2946:	86 78       	andi	r24, 0x86	; 134
    2948:	09 f0       	breq	.+2      	; 0x294c <vfprintf+0x2f8>
    294a:	1f 5f       	subi	r17, 0xFF	; 255
    294c:	0f 2d       	mov	r16, r15
    294e:	f3 fc       	sbrc	r15, 3
    2950:	14 c0       	rjmp	.+40     	; 0x297a <vfprintf+0x326>
    2952:	f0 fe       	sbrs	r15, 0
    2954:	0f c0       	rjmp	.+30     	; 0x2974 <vfprintf+0x320>
    2956:	1e 15       	cp	r17, r14
    2958:	10 f0       	brcs	.+4      	; 0x295e <vfprintf+0x30a>
    295a:	9d 2c       	mov	r9, r13
    295c:	0b c0       	rjmp	.+22     	; 0x2974 <vfprintf+0x320>
    295e:	9d 2c       	mov	r9, r13
    2960:	9e 0c       	add	r9, r14
    2962:	91 1a       	sub	r9, r17
    2964:	1e 2d       	mov	r17, r14
    2966:	06 c0       	rjmp	.+12     	; 0x2974 <vfprintf+0x320>
    2968:	80 e2       	ldi	r24, 0x20	; 32
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	b3 01       	movw	r22, r6
    296e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    2972:	1f 5f       	subi	r17, 0xFF	; 255
    2974:	1e 15       	cp	r17, r14
    2976:	c0 f3       	brcs	.-16     	; 0x2968 <vfprintf+0x314>
    2978:	04 c0       	rjmp	.+8      	; 0x2982 <vfprintf+0x32e>
    297a:	1e 15       	cp	r17, r14
    297c:	10 f4       	brcc	.+4      	; 0x2982 <vfprintf+0x32e>
    297e:	e1 1a       	sub	r14, r17
    2980:	01 c0       	rjmp	.+2      	; 0x2984 <vfprintf+0x330>
    2982:	ee 24       	eor	r14, r14
    2984:	04 ff       	sbrs	r16, 4
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <vfprintf+0x352>
    2988:	80 e3       	ldi	r24, 0x30	; 48
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	b3 01       	movw	r22, r6
    298e:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    2992:	02 ff       	sbrs	r16, 2
    2994:	1d c0       	rjmp	.+58     	; 0x29d0 <vfprintf+0x37c>
    2996:	01 fd       	sbrc	r16, 1
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <vfprintf+0x34c>
    299a:	88 e7       	ldi	r24, 0x78	; 120
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	0e c0       	rjmp	.+28     	; 0x29bc <vfprintf+0x368>
    29a0:	88 e5       	ldi	r24, 0x58	; 88
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	0b c0       	rjmp	.+22     	; 0x29bc <vfprintf+0x368>
    29a6:	80 2f       	mov	r24, r16
    29a8:	86 78       	andi	r24, 0x86	; 134
    29aa:	91 f0       	breq	.+36     	; 0x29d0 <vfprintf+0x37c>
    29ac:	01 ff       	sbrs	r16, 1
    29ae:	02 c0       	rjmp	.+4      	; 0x29b4 <vfprintf+0x360>
    29b0:	8b e2       	ldi	r24, 0x2B	; 43
    29b2:	01 c0       	rjmp	.+2      	; 0x29b6 <vfprintf+0x362>
    29b4:	80 e2       	ldi	r24, 0x20	; 32
    29b6:	f7 fc       	sbrc	r15, 7
    29b8:	8d e2       	ldi	r24, 0x2D	; 45
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	b3 01       	movw	r22, r6
    29be:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    29c2:	06 c0       	rjmp	.+12     	; 0x29d0 <vfprintf+0x37c>
    29c4:	80 e3       	ldi	r24, 0x30	; 48
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	b3 01       	movw	r22, r6
    29ca:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    29ce:	9a 94       	dec	r9
    29d0:	d9 14       	cp	r13, r9
    29d2:	c0 f3       	brcs	.-16     	; 0x29c4 <vfprintf+0x370>
    29d4:	da 94       	dec	r13
    29d6:	f1 01       	movw	r30, r2
    29d8:	ed 0d       	add	r30, r13
    29da:	f1 1d       	adc	r31, r1
    29dc:	80 81       	ld	r24, Z
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	b3 01       	movw	r22, r6
    29e2:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    29e6:	dd 20       	and	r13, r13
    29e8:	a9 f7       	brne	.-22     	; 0x29d4 <vfprintf+0x380>
    29ea:	06 c0       	rjmp	.+12     	; 0x29f8 <vfprintf+0x3a4>
    29ec:	80 e2       	ldi	r24, 0x20	; 32
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	b3 01       	movw	r22, r6
    29f2:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <fputc>
    29f6:	ea 94       	dec	r14
    29f8:	ee 20       	and	r14, r14
    29fa:	c1 f7       	brne	.-16     	; 0x29ec <vfprintf+0x398>
    29fc:	43 ce       	rjmp	.-890    	; 0x2684 <vfprintf+0x30>
    29fe:	f3 01       	movw	r30, r6
    2a00:	66 81       	ldd	r22, Z+6	; 0x06
    2a02:	77 81       	ldd	r23, Z+7	; 0x07
    2a04:	cb 01       	movw	r24, r22
    2a06:	2b 96       	adiw	r28, 0x0b	; 11
    2a08:	e2 e1       	ldi	r30, 0x12	; 18
    2a0a:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00002a0e <strnlen_P>:
    2a0e:	fc 01       	movw	r30, r24
    2a10:	05 90       	lpm	r0, Z+
    2a12:	61 50       	subi	r22, 0x01	; 1
    2a14:	70 40       	sbci	r23, 0x00	; 0
    2a16:	01 10       	cpse	r0, r1
    2a18:	d8 f7       	brcc	.-10     	; 0x2a10 <strnlen_P+0x2>
    2a1a:	80 95       	com	r24
    2a1c:	90 95       	com	r25
    2a1e:	8e 0f       	add	r24, r30
    2a20:	9f 1f       	adc	r25, r31
    2a22:	08 95       	ret

00002a24 <strnlen>:
    2a24:	fc 01       	movw	r30, r24
    2a26:	61 50       	subi	r22, 0x01	; 1
    2a28:	70 40       	sbci	r23, 0x00	; 0
    2a2a:	01 90       	ld	r0, Z+
    2a2c:	01 10       	cpse	r0, r1
    2a2e:	d8 f7       	brcc	.-10     	; 0x2a26 <strnlen+0x2>
    2a30:	80 95       	com	r24
    2a32:	90 95       	com	r25
    2a34:	8e 0f       	add	r24, r30
    2a36:	9f 1f       	adc	r25, r31
    2a38:	08 95       	ret

00002a3a <fputc>:
    2a3a:	0f 93       	push	r16
    2a3c:	1f 93       	push	r17
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	8c 01       	movw	r16, r24
    2a44:	eb 01       	movw	r28, r22
    2a46:	8b 81       	ldd	r24, Y+3	; 0x03
    2a48:	81 ff       	sbrs	r24, 1
    2a4a:	1b c0       	rjmp	.+54     	; 0x2a82 <fputc+0x48>
    2a4c:	82 ff       	sbrs	r24, 2
    2a4e:	0d c0       	rjmp	.+26     	; 0x2a6a <fputc+0x30>
    2a50:	2e 81       	ldd	r18, Y+6	; 0x06
    2a52:	3f 81       	ldd	r19, Y+7	; 0x07
    2a54:	8c 81       	ldd	r24, Y+4	; 0x04
    2a56:	9d 81       	ldd	r25, Y+5	; 0x05
    2a58:	28 17       	cp	r18, r24
    2a5a:	39 07       	cpc	r19, r25
    2a5c:	64 f4       	brge	.+24     	; 0x2a76 <fputc+0x3c>
    2a5e:	e8 81       	ld	r30, Y
    2a60:	f9 81       	ldd	r31, Y+1	; 0x01
    2a62:	01 93       	st	Z+, r16
    2a64:	f9 83       	std	Y+1, r31	; 0x01
    2a66:	e8 83       	st	Y, r30
    2a68:	06 c0       	rjmp	.+12     	; 0x2a76 <fputc+0x3c>
    2a6a:	e8 85       	ldd	r30, Y+8	; 0x08
    2a6c:	f9 85       	ldd	r31, Y+9	; 0x09
    2a6e:	80 2f       	mov	r24, r16
    2a70:	09 95       	icall
    2a72:	89 2b       	or	r24, r25
    2a74:	31 f4       	brne	.+12     	; 0x2a82 <fputc+0x48>
    2a76:	8e 81       	ldd	r24, Y+6	; 0x06
    2a78:	9f 81       	ldd	r25, Y+7	; 0x07
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	9f 83       	std	Y+7, r25	; 0x07
    2a7e:	8e 83       	std	Y+6, r24	; 0x06
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <fputc+0x4c>
    2a82:	0f ef       	ldi	r16, 0xFF	; 255
    2a84:	1f ef       	ldi	r17, 0xFF	; 255
    2a86:	c8 01       	movw	r24, r16
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	1f 91       	pop	r17
    2a8e:	0f 91       	pop	r16
    2a90:	08 95       	ret

00002a92 <__ultoa_invert>:
    2a92:	fa 01       	movw	r30, r20
    2a94:	aa 27       	eor	r26, r26
    2a96:	28 30       	cpi	r18, 0x08	; 8
    2a98:	51 f1       	breq	.+84     	; 0x2aee <__ultoa_invert+0x5c>
    2a9a:	20 31       	cpi	r18, 0x10	; 16
    2a9c:	81 f1       	breq	.+96     	; 0x2afe <__ultoa_invert+0x6c>
    2a9e:	e8 94       	clt
    2aa0:	6f 93       	push	r22
    2aa2:	6e 7f       	andi	r22, 0xFE	; 254
    2aa4:	6e 5f       	subi	r22, 0xFE	; 254
    2aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    2aac:	af 4f       	sbci	r26, 0xFF	; 255
    2aae:	b1 e0       	ldi	r27, 0x01	; 1
    2ab0:	3e d0       	rcall	.+124    	; 0x2b2e <__ultoa_invert+0x9c>
    2ab2:	b4 e0       	ldi	r27, 0x04	; 4
    2ab4:	3c d0       	rcall	.+120    	; 0x2b2e <__ultoa_invert+0x9c>
    2ab6:	67 0f       	add	r22, r23
    2ab8:	78 1f       	adc	r23, r24
    2aba:	89 1f       	adc	r24, r25
    2abc:	9a 1f       	adc	r25, r26
    2abe:	a1 1d       	adc	r26, r1
    2ac0:	68 0f       	add	r22, r24
    2ac2:	79 1f       	adc	r23, r25
    2ac4:	8a 1f       	adc	r24, r26
    2ac6:	91 1d       	adc	r25, r1
    2ac8:	a1 1d       	adc	r26, r1
    2aca:	6a 0f       	add	r22, r26
    2acc:	71 1d       	adc	r23, r1
    2ace:	81 1d       	adc	r24, r1
    2ad0:	91 1d       	adc	r25, r1
    2ad2:	a1 1d       	adc	r26, r1
    2ad4:	20 d0       	rcall	.+64     	; 0x2b16 <__ultoa_invert+0x84>
    2ad6:	09 f4       	brne	.+2      	; 0x2ada <__ultoa_invert+0x48>
    2ad8:	68 94       	set
    2ada:	3f 91       	pop	r19
    2adc:	2a e0       	ldi	r18, 0x0A	; 10
    2ade:	26 9f       	mul	r18, r22
    2ae0:	11 24       	eor	r1, r1
    2ae2:	30 19       	sub	r19, r0
    2ae4:	30 5d       	subi	r19, 0xD0	; 208
    2ae6:	31 93       	st	Z+, r19
    2ae8:	de f6       	brtc	.-74     	; 0x2aa0 <__ultoa_invert+0xe>
    2aea:	cf 01       	movw	r24, r30
    2aec:	08 95       	ret
    2aee:	46 2f       	mov	r20, r22
    2af0:	47 70       	andi	r20, 0x07	; 7
    2af2:	40 5d       	subi	r20, 0xD0	; 208
    2af4:	41 93       	st	Z+, r20
    2af6:	b3 e0       	ldi	r27, 0x03	; 3
    2af8:	0f d0       	rcall	.+30     	; 0x2b18 <__ultoa_invert+0x86>
    2afa:	c9 f7       	brne	.-14     	; 0x2aee <__ultoa_invert+0x5c>
    2afc:	f6 cf       	rjmp	.-20     	; 0x2aea <__ultoa_invert+0x58>
    2afe:	46 2f       	mov	r20, r22
    2b00:	4f 70       	andi	r20, 0x0F	; 15
    2b02:	40 5d       	subi	r20, 0xD0	; 208
    2b04:	4a 33       	cpi	r20, 0x3A	; 58
    2b06:	18 f0       	brcs	.+6      	; 0x2b0e <__ultoa_invert+0x7c>
    2b08:	49 5d       	subi	r20, 0xD9	; 217
    2b0a:	31 fd       	sbrc	r19, 1
    2b0c:	40 52       	subi	r20, 0x20	; 32
    2b0e:	41 93       	st	Z+, r20
    2b10:	02 d0       	rcall	.+4      	; 0x2b16 <__ultoa_invert+0x84>
    2b12:	a9 f7       	brne	.-22     	; 0x2afe <__ultoa_invert+0x6c>
    2b14:	ea cf       	rjmp	.-44     	; 0x2aea <__ultoa_invert+0x58>
    2b16:	b4 e0       	ldi	r27, 0x04	; 4
    2b18:	a6 95       	lsr	r26
    2b1a:	97 95       	ror	r25
    2b1c:	87 95       	ror	r24
    2b1e:	77 95       	ror	r23
    2b20:	67 95       	ror	r22
    2b22:	ba 95       	dec	r27
    2b24:	c9 f7       	brne	.-14     	; 0x2b18 <__ultoa_invert+0x86>
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	61 05       	cpc	r22, r1
    2b2a:	71 05       	cpc	r23, r1
    2b2c:	08 95       	ret
    2b2e:	9b 01       	movw	r18, r22
    2b30:	ac 01       	movw	r20, r24
    2b32:	0a 2e       	mov	r0, r26
    2b34:	06 94       	lsr	r0
    2b36:	57 95       	ror	r21
    2b38:	47 95       	ror	r20
    2b3a:	37 95       	ror	r19
    2b3c:	27 95       	ror	r18
    2b3e:	ba 95       	dec	r27
    2b40:	c9 f7       	brne	.-14     	; 0x2b34 <__ultoa_invert+0xa2>
    2b42:	62 0f       	add	r22, r18
    2b44:	73 1f       	adc	r23, r19
    2b46:	84 1f       	adc	r24, r20
    2b48:	95 1f       	adc	r25, r21
    2b4a:	a0 1d       	adc	r26, r0
    2b4c:	08 95       	ret

00002b4e <_exit>:
    2b4e:	f8 94       	cli

00002b50 <__stop_program>:
    2b50:	ff cf       	rjmp	.-2      	; 0x2b50 <__stop_program>
